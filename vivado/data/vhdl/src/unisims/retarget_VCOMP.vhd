--**************************************************************
--  Copyright (c) 1995/2017 Xilinx, Inc.  All rights reserved.
--  File Name    : retarget_VCOMP.vhd
--  Library      : unisim
--  Version      : 2018.1
--  Entity Count : 863
--  Generated by : gencomp.pl
--**************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
package VCOMPONENTS is
attribute BOX_TYPE : string;


-- synopsys translate_off

-----------------------------------------
-----------   FPGA Globals --------------
-----------------------------------------
signal GSR : std_logic := '0';
signal GTS : std_logic := '0';
signal GWE : std_logic;
signal PLL_LOCKG : std_logic := 'H';
signal PROGB_GLBL : std_logic;
signal CCLKO_GLBL : std_logic;
signal FCSBO_GLBL : std_logic;
signal DO_GLBL : std_logic_vector(3 downto 0);
signal DI_GLBL : std_logic_vector(3 downto 0);

-----------------------------------------
-----------   CPLD Globals --------------
-----------------------------------------
signal PRLD : std_logic := '0';

-----------------------------------------
-----------   JTAG Globals --------------
-----------------------------------------
signal JTAG_TDO_GLBL  : std_logic;
signal JTAG_TDI_GLBL  : std_logic;
signal JTAG_TMS_GLBL  : std_logic;
signal JTAG_TCK_GLBL  : std_logic;
signal JTAG_TRST_GLBL : std_logic;

signal JTAG_CAPTURE_GLBL : std_logic;
signal JTAG_RESET_GLBL : std_logic;
signal JTAG_SHIFT_GLBL : std_logic;
signal JTAG_UPDATE_GLBL : std_logic;
signal JTAG_RUNTEST_GLBL : std_logic;

signal JTAG_SEL1_GLBL : std_logic := '0';
signal JTAG_SEL2_GLBL : std_logic := '0';
signal JTAG_SEL3_GLBL : std_logic := '0';
signal JTAG_SEL4_GLBL : std_logic := '0';

signal JTAG_USER_TDO1_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO2_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO3_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO4_GLBL : std_logic := 'Z';

-- synopsys translate_on

-- START COMPONENT
----- component AND2 -----
component AND2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND2 : component is "PRIMITIVE";

----- component AND2B1 -----
component AND2B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND2B1 : component is "PRIMITIVE";

----- component AND2B2 -----
component AND2B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND2B2 : component is "PRIMITIVE";

----- component AND3 -----
component AND3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND3 : component is "PRIMITIVE";

----- component AND3B1 -----
component AND3B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND3B1 : component is "PRIMITIVE";

----- component AND3B2 -----
component AND3B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND3B2 : component is "PRIMITIVE";

----- component AND3B3 -----
component AND3B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND3B3 : component is "PRIMITIVE";

----- component AND4 -----
component AND4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND4 : component is "PRIMITIVE";

----- component AND4B1 -----
component AND4B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND4B1 : component is "PRIMITIVE";

----- component AND4B2 -----
component AND4B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND4B2 : component is "PRIMITIVE";

----- component AND4B3 -----
component AND4B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND4B3 : component is "PRIMITIVE";

----- component AND4B4 -----
component AND4B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND4B4 : component is "PRIMITIVE";

----- component AND5 -----
component AND5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5 : component is "PRIMITIVE";

----- component AND5B1 -----
component AND5B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5B1 : component is "PRIMITIVE";

----- component AND5B2 -----
component AND5B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5B2 : component is "PRIMITIVE";

----- component AND5B3 -----
component AND5B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5B3 : component is "PRIMITIVE";

----- component AND5B4 -----
component AND5B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5B4 : component is "PRIMITIVE";

----- component AND5B5 -----
component AND5B5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND5B5 : component is "PRIMITIVE";

----- component BSCAN_SPARTAN3 -----
component BSCAN_SPARTAN3
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK1 : out std_ulogic := 'L';
     DRCK2 : out std_ulogic := 'L';
     RESET : out std_ulogic := 'L';
     SEL1 : out std_ulogic := 'L';
     SEL2 : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO1 : in std_ulogic := 'X';
     TDO2 : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_SPARTAN3 : component is "PRIMITIVE";

----- component BSCAN_SPARTAN3A -----
component BSCAN_SPARTAN3A
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK1 : out std_ulogic := 'L';
     DRCK2 : out std_ulogic := 'L';
     RESET : out std_ulogic := 'L';
     SEL1 : out std_ulogic := 'L';
     SEL2 : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TCK : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     TMS : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO1 : in std_ulogic := 'X';
     TDO2 : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_SPARTAN3A : component is "PRIMITIVE";

----- component BSCAN_SPARTAN6 -----
component BSCAN_SPARTAN6
  generic (
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     RUNTEST : out std_ulogic := 'L';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TCK : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     TMS : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_SPARTAN6 : component is "PRIMITIVE";

----- component BSCAN_VIRTEX4 -----
component BSCAN_VIRTEX4
  generic (
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_VIRTEX4 : component is "PRIMITIVE";

----- component BSCAN_VIRTEX5 -----
component BSCAN_VIRTEX5
  generic (
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_VIRTEX5 : component is "PRIMITIVE";

----- component BSCAN_VIRTEX6 -----
component BSCAN_VIRTEX6
  generic (
     DISABLE_JTAG : boolean := FALSE;
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     RUNTEST : out std_ulogic := 'L';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TCK : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     TMS : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCAN_VIRTEX6 : component is "PRIMITIVE";

----- component BUFGCE_1 -----
component BUFGCE_1
  port (
     O : out STD_ULOGIC;
     CE: in STD_ULOGIC;
     I : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  BUFGCE_1 : component is "PRIMITIVE";

----- component BUFGMUX -----
component BUFGMUX
  generic (
     CLK_SEL_TYPE : string := "SYNC"
  );
  port (
     O : out std_ulogic := '0';
     I0 : in std_ulogic := '0';
     I1 : in std_ulogic := '0';
     S : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  BUFGMUX : component is "PRIMITIVE";

----- component BUFGMUX_1 -----
component BUFGMUX_1
  generic (
     CLK_SEL_TYPE : string := "SYNC"
  );
  port (
     O : out std_ulogic := '1';
     I0 : in std_ulogic := '0';
     I1 : in std_ulogic := '0';
     S : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  BUFGMUX_1 : component is "PRIMITIVE";

----- component BUFGMUX_CTRL -----
component BUFGMUX_CTRL
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGMUX_CTRL : component is "PRIMITIVE";

----- component BUFGMUX_VIRTEX4 -----
component BUFGMUX_VIRTEX4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGMUX_VIRTEX4 : component is "PRIMITIVE";

----- component BUFIO2 -----
component BUFIO2
  generic (
     DIVIDE : integer := 1;
     DIVIDE_BYPASS : boolean := TRUE;
     I_INVERT : boolean := FALSE;
     USE_DOUBLER : boolean := FALSE
  );
  port (
     DIVCLK : out std_ulogic;
     IOCLK : out std_ulogic;
     SERDESSTROBE : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFIO2 : component is "PRIMITIVE";

----- component CAPTURE_SPARTAN3 -----
component CAPTURE_SPARTAN3
  generic (
     ONESHOT : boolean := false
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTURE_SPARTAN3 : component is "PRIMITIVE";

----- component CAPTURE_SPARTAN3A -----
component CAPTURE_SPARTAN3A
  generic (
     ONESHOT : boolean := true
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTURE_SPARTAN3A : component is "PRIMITIVE";

----- component CAPTURE_VIRTEX4 -----
component CAPTURE_VIRTEX4
  generic (
     ONESHOT : boolean := true
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTURE_VIRTEX4 : component is "PRIMITIVE";

----- component CAPTURE_VIRTEX5 -----
component CAPTURE_VIRTEX5
  generic (
     ONESHOT : boolean := true
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTURE_VIRTEX5 : component is "PRIMITIVE";

----- component CAPTURE_VIRTEX6 -----
component CAPTURE_VIRTEX6
  generic (
     ONESHOT : boolean := true
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTURE_VIRTEX6 : component is "PRIMITIVE";

----- component DCM -----
component DCM
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := false;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DSS_MODE : string := "NONE";
     DUTY_CYCLE_CORRECTION : boolean := true;
     FACTORY_JF : bit_vector := X"C080";
     PHASE_SHIFT : integer := 0;
     SIM_MODE : string := "SAFE";
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic := '0';
     CLK180 : out std_ulogic := '0';
     CLK270 : out std_ulogic := '0';
     CLK2X : out std_ulogic := '0';
     CLK2X180 : out std_ulogic := '0';
     CLK90 : out std_ulogic := '0';
     CLKDV : out std_ulogic := '0';
     CLKFX : out std_ulogic := '0';
     CLKFX180 : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     STATUS : out std_logic_vector(7 downto 0) := "00000000";
     CLKFB : in std_ulogic := '0';
     CLKIN : in std_ulogic := '0';
     DSSEN : in std_ulogic := '0';
     PSCLK : in std_ulogic := '0';
     PSEN : in std_ulogic := '0';
     PSINCDEC : in std_ulogic := '0';
     RST : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  DCM : component is "PRIMITIVE";

----- component DCM_BASE -----
component DCM_BASE
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := FALSE;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DCM_AUTOCALIBRATION : boolean := TRUE;
     DCM_PERFORMANCE_MODE : string := "MAX_SPEED";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DUTY_CYCLE_CORRECTION : boolean := TRUE;
     FACTORY_JF : bit_vector := X"F0F0";
     PHASE_SHIFT : integer := 0;
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic;
     CLK180 : out std_ulogic;
     CLK270 : out std_ulogic;
     CLK2X : out std_ulogic;
     CLK2X180 : out std_ulogic;
     CLK90 : out std_ulogic;
     CLKDV : out std_ulogic;
     CLKFX : out std_ulogic;
     CLKFX180 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFB : in std_ulogic;
     CLKIN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DCM_BASE : component is "PRIMITIVE";

----- component DCM_PS -----
component DCM_PS
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := FALSE;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DCM_AUTOCALIBRATION : boolean := TRUE;
     DCM_PERFORMANCE_MODE : string := "MAX_SPEED";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DUTY_CYCLE_CORRECTION : boolean := TRUE;
     FACTORY_JF : bit_vector := X"F0F0";
     PHASE_SHIFT : integer := 0;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLK0 : out std_ulogic;
     CLK180 : out std_ulogic;
     CLK270 : out std_ulogic;
     CLK2X : out std_ulogic;
     CLK2X180 : out std_ulogic;
     CLK90 : out std_ulogic;
     CLKDV : out std_ulogic;
     CLKFX : out std_ulogic;
     CLKFX180 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     LOCKED : out std_ulogic;
     PSDONE : out std_ulogic;
     CLKFB : in std_ulogic;
     CLKIN : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DCM_PS : component is "PRIMITIVE";

----- component DSP48 -----
component DSP48
  generic (
     AREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     LEGACY_MODE : string := "MULT18X18S";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PREG : integer := 1;
     SUBTRACTREG : integer := 1
  );
  port (
     BCOUT : out std_logic_vector(17 downto 0);
     P : out std_logic_vector(47 downto 0);
     PCOUT : out std_logic_vector(47 downto 0);
     A : in std_logic_vector(17 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(1 downto 0);
     CEA : in std_ulogic;
     CEB : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECINSUB : in std_ulogic;
     CECTRL : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     OPMODE : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCARRYIN : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic;
     SUBTRACT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48 : component is "PRIMITIVE";

----- component DSP48A -----
component DSP48A
  generic (
     A0REG : integer := 0;
     A1REG : integer := 1;
     B0REG : integer := 0;
     B1REG : integer := 1;
     CARRYINREG : integer := 1;
     CARRYINSEL : string := "CARRYIN";
     CREG : integer := 1;
     DREG : integer := 1;
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PREG : integer := 1;
     RSTTYPE : string := "SYNC"
  );
  port (
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYOUT : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PCOUT : out std_logic_vector(47 downto 0);
     A : in std_logic_vector(17 downto 0);
     B : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYIN : in std_ulogic;
     CEA : in std_ulogic;
     CEB : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CED : in std_ulogic;
     CEM : in std_ulogic;
     CEOPMODE : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(17 downto 0);
     OPMODE : in std_logic_vector(7 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCARRYIN : in std_ulogic;
     RSTD : in std_ulogic;
     RSTM : in std_ulogic;
     RSTOPMODE : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48A : component is "PRIMITIVE";

----- component DSP48A1 -----
component DSP48A1
  generic (
     A0REG : integer := 0;
     A1REG : integer := 1;
     B0REG : integer := 0;
     B1REG : integer := 1;
     CARRYINREG : integer := 1;
     CARRYINSEL : string := "OPMODE5";
     CARRYOUTREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PREG : integer := 1;
     RSTTYPE : string := "SYNC"
  );
  port (
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYOUT : out std_ulogic;
     CARRYOUTF : out std_ulogic;
     M : out std_logic_vector(35 downto 0);
     P : out std_logic_vector(47 downto 0);
     PCOUT : out std_logic_vector(47 downto 0);
     A : in std_logic_vector(17 downto 0);
     B : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYIN : in std_ulogic := 'L';
     CEA : in std_ulogic;
     CEB : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CED : in std_ulogic;
     CEM : in std_ulogic;
     CEOPMODE : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(17 downto 0);
     OPMODE : in std_logic_vector(7 downto 0);
     PCIN : in std_logic_vector(47 downto 0) := (others => 'L');
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCARRYIN : in std_ulogic;
     RSTD : in std_ulogic;
     RSTM : in std_ulogic;
     RSTOPMODE : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48A1 : component is "PRIMITIVE";

----- component DSP48E -----
component DSP48E
  generic (
     ACASCREG : integer := 1;
     ALUMODEREG : integer := 1;
     AREG : integer := 1;
     AUTORESET_PATTERN_DETECT : boolean := FALSE;
     AUTORESET_PATTERN_DETECT_OPTINV : string := "MATCH";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     MASK : bit_vector := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     MULTCARRYINREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : bit_vector := X"000000000000";
     PREG : integer := 1;
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     SEL_ROUNDING_MASK : string := "SEL_MASK";
     SIM_MODE : string := "SAFE";
     USE_MULT : string := "MULT_S";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CEM : in std_ulogic;
     CEMULTCARRYIN : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E : component is "PRIMITIVE";

----- component FD -----
component FD
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FD : component is "PRIMITIVE";

----- component FDC -----
component FDC
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDC : component is "PRIMITIVE";

----- component FDCE_1 -----
component FDCE_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCE_1 : component is "PRIMITIVE";

----- component FDCP -----
component FDCP
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCP : component is "PRIMITIVE";

----- component FDCPE -----
component FDCPE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCPE : component is "PRIMITIVE";

----- component FDCPE_1 -----
component FDCPE_1
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCPE_1 : component is "PRIMITIVE";

----- component FDCP_1 -----
component FDCP_1
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCP_1 : component is "PRIMITIVE";

----- component FDC_1 -----
component FDC_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDC_1 : component is "PRIMITIVE";

----- component FDE -----
component FDE
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDE : component is "PRIMITIVE";

----- component FDE_1 -----
component FDE_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDE_1 : component is "PRIMITIVE";

----- component FDP -----
component FDP
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDP : component is "PRIMITIVE";

----- component FDPE_1 -----
component FDPE_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDPE_1 : component is "PRIMITIVE";

----- component FDP_1 -----
component FDP_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDP_1 : component is "PRIMITIVE";

----- component FDR -----
component FDR
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDR : component is "PRIMITIVE";

----- component FDRE_1 -----
component FDRE_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRE_1 : component is "PRIMITIVE";

----- component FDRS -----
component FDRS
  generic (
     INIT : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_R_INVERTED : bit := '0';
     IS_S_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRS : component is "PRIMITIVE";

----- component FDRSE -----
component FDRSE
  generic (
     INIT : bit := '0';
     IS_CE_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_R_INVERTED : bit := '0';
     IS_S_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRSE : component is "PRIMITIVE";

----- component FDRSE_1 -----
component FDRSE_1
  generic (
     INIT : bit := '0';
     IS_CE_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_R_INVERTED : bit := '0';
     IS_S_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRSE_1 : component is "PRIMITIVE";

----- component FDRS_1 -----
component FDRS_1
  generic (
     INIT : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_R_INVERTED : bit := '0';
     IS_S_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRS_1 : component is "PRIMITIVE";

----- component FDR_1 -----
component FDR_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDR_1 : component is "PRIMITIVE";

----- component FDS -----
component FDS
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDS : component is "PRIMITIVE";

----- component FDSE_1 -----
component FDSE_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDSE_1 : component is "PRIMITIVE";

----- component FDS_1 -----
component FDS_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDS_1 : component is "PRIMITIVE";

----- component FD_1 -----
component FD_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FD_1 : component is "PRIMITIVE";

----- component FIFO16 -----
component FIFO16
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"080";
     ALMOST_FULL_OFFSET : bit_vector := X"080";
     DATA_WIDTH : integer := 36;
     FIRST_WORD_FALL_THROUGH : boolean := false
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (31 downto 0);
     DOP : out std_logic_vector (3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (11 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (11 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (31 downto 0);
     DIP : in std_logic_vector (3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RST : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO16 : component is "PRIMITIVE";

----- component FIFO18 -----
component FIFO18
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"080";
     ALMOST_FULL_OFFSET : bit_vector := X"080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_SYN : boolean := FALSE;
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     SIM_MODE : string := "SAFE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (15 downto 0);
     DOP : out std_logic_vector (1 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (11 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (11 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (15 downto 0);
     DIP : in std_logic_vector (1 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RST : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18 : component is "PRIMITIVE";

----- component FIFO18_36 -----
component FIFO18_36
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"080";
     ALMOST_FULL_OFFSET : bit_vector := X"080";
     DO_REG : integer := 1;
     EN_SYN : boolean := FALSE;
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     SIM_MODE : string := "SAFE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (31 downto 0);
     DOP : out std_logic_vector (3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (8 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (8 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (31 downto 0);
     DIP : in std_logic_vector (3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RST : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18_36 : component is "PRIMITIVE";

----- component FIFO36 -----
component FIFO36
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"0080";
     ALMOST_FULL_OFFSET : bit_vector := X"0080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_SYN : boolean := FALSE;
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     SIM_MODE : string := "SAFE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (31 downto 0);
     DOP : out std_logic_vector (3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (12 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (12 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (31 downto 0);
     DIP : in std_logic_vector (3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RST : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36 : component is "PRIMITIVE";

----- component FIFO36_72 -----
component FIFO36_72
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"080";
     ALMOST_FULL_OFFSET : bit_vector := X"080";
     DO_REG : integer := 1;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     EN_SYN : boolean := FALSE;
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     SIM_MODE : string := "SAFE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DBITERR : out std_ulogic;
     DO : out std_logic_vector (63 downto 0);
     DOP : out std_logic_vector (7 downto 0);
     ECCPARITY : out std_logic_vector (7 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (8 downto 0);
     RDERR : out std_ulogic;
     SBITERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (8 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (63 downto 0);
     DIP : in std_logic_vector (7 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RST : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36_72 : component is "PRIMITIVE";

----- component FRAME_ECC_VIRTEX6 -----
component FRAME_ECC_VIRTEX6
  generic (
     FARSRC : string:= "EFAR";
     FRAME_RBT_IN_FILENAME : string := "NONE"
  );
  port (
     CRCERROR : out std_ulogic;
     ECCERROR : out std_ulogic;
     ECCERRORSINGLE : out std_ulogic;
     FAR : out std_logic_vector(23 downto 0);
     SYNBIT : out std_logic_vector(4 downto 0);
     SYNDROME : out std_logic_vector(12 downto 0);
     SYNDROMEVALID : out std_ulogic;
     SYNWORD : out std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  FRAME_ECC_VIRTEX6 : component is "PRIMITIVE";

----- component GTPA1_DUAL -----
component GTPA1_DUAL
  generic (
     AC_CAP_DIS_0 : boolean := TRUE;
     AC_CAP_DIS_1 : boolean := TRUE;
     ALIGN_COMMA_WORD_0 : integer := 1;
     ALIGN_COMMA_WORD_1 : integer := 1;
     CB2_INH_CC_PERIOD_0 : integer := 8;
     CB2_INH_CC_PERIOD_1 : integer := 8;
     CDR_PH_ADJ_TIME_0 : bit_vector := "01010";
     CDR_PH_ADJ_TIME_1 : bit_vector := "01010";
     CHAN_BOND_1_MAX_SKEW_0 : integer := 7;
     CHAN_BOND_1_MAX_SKEW_1 : integer := 7;
     CHAN_BOND_2_MAX_SKEW_0 : integer := 1;
     CHAN_BOND_2_MAX_SKEW_1 : integer := 1;
     CHAN_BOND_KEEP_ALIGN_0 : boolean := FALSE;
     CHAN_BOND_KEEP_ALIGN_1 : boolean := FALSE;
     CHAN_BOND_SEQ_1_1_0 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2_0 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_2_1 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_3_0 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_3_1 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_4_0 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_1_4_1 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_1_ENABLE_0 : bit_vector := "1111";
     CHAN_BOND_SEQ_1_ENABLE_1 : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1_0 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_2_1_1 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_2_2_0 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_2_1 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_3_0 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_3_1 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_4_0 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_4_1 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_ENABLE_0 : bit_vector := "1111";
     CHAN_BOND_SEQ_2_ENABLE_1 : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE_0 : boolean := FALSE;
     CHAN_BOND_SEQ_2_USE_1 : boolean := FALSE;
     CHAN_BOND_SEQ_LEN_0 : integer := 1;
     CHAN_BOND_SEQ_LEN_1 : integer := 1;
     CLK25_DIVIDER_0 : integer := 4;
     CLK25_DIVIDER_1 : integer := 4;
     CLKINDC_B_0 : boolean := TRUE;
     CLKINDC_B_1 : boolean := TRUE;
     CLKRCV_TRST_0 : boolean := TRUE;
     CLKRCV_TRST_1 : boolean := TRUE;
     CLK_CORRECT_USE_0 : boolean := TRUE;
     CLK_CORRECT_USE_1 : boolean := TRUE;
     CLK_COR_ADJ_LEN_0 : integer := 1;
     CLK_COR_ADJ_LEN_1 : integer := 1;
     CLK_COR_DET_LEN_0 : integer := 1;
     CLK_COR_DET_LEN_1 : integer := 1;
     CLK_COR_INSERT_IDLE_FLAG_0 : boolean := FALSE;
     CLK_COR_INSERT_IDLE_FLAG_1 : boolean := FALSE;
     CLK_COR_KEEP_IDLE_0 : boolean := FALSE;
     CLK_COR_KEEP_IDLE_1 : boolean := FALSE;
     CLK_COR_MAX_LAT_0 : integer := 20;
     CLK_COR_MAX_LAT_1 : integer := 20;
     CLK_COR_MIN_LAT_0 : integer := 18;
     CLK_COR_MIN_LAT_1 : integer := 18;
     CLK_COR_PRECEDENCE_0 : boolean := TRUE;
     CLK_COR_PRECEDENCE_1 : boolean := TRUE;
     CLK_COR_REPEAT_WAIT_0 : integer := 0;
     CLK_COR_REPEAT_WAIT_1 : integer := 0;
     CLK_COR_SEQ_1_1_0 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_2_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE_0 : bit_vector := "1111";
     CLK_COR_SEQ_1_ENABLE_1 : bit_vector := "1111";
     CLK_COR_SEQ_2_1_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_1_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_2_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_2_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_3_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_3_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_4_0 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_4_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_ENABLE_0 : bit_vector := "1111";
     CLK_COR_SEQ_2_ENABLE_1 : bit_vector := "1111";
     CLK_COR_SEQ_2_USE_0 : boolean := FALSE;
     CLK_COR_SEQ_2_USE_1 : boolean := FALSE;
     CLK_OUT_GTP_SEL_0 : string := "REFCLKPLL0";
     CLK_OUT_GTP_SEL_1 : string := "REFCLKPLL1";
     CM_TRIM_0 : bit_vector := "00";
     CM_TRIM_1 : bit_vector := "00";
     COMMA_10B_ENABLE_0 : bit_vector := "1111111111";
     COMMA_10B_ENABLE_1 : bit_vector := "1111111111";
     COM_BURST_VAL_0 : bit_vector := "1111";
     COM_BURST_VAL_1 : bit_vector := "1111";
     DEC_MCOMMA_DETECT_0 : boolean := TRUE;
     DEC_MCOMMA_DETECT_1 : boolean := TRUE;
     DEC_PCOMMA_DETECT_0 : boolean := TRUE;
     DEC_PCOMMA_DETECT_1 : boolean := TRUE;
     DEC_VALID_COMMA_ONLY_0 : boolean := TRUE;
     DEC_VALID_COMMA_ONLY_1 : boolean := TRUE;
     GTP_CFG_PWRUP_0 : boolean := TRUE;
     GTP_CFG_PWRUP_1 : boolean := TRUE;
     MCOMMA_10B_VALUE_0 : bit_vector := "1010000011";
     MCOMMA_10B_VALUE_1 : bit_vector := "1010000011";
     MCOMMA_DETECT_0 : boolean := TRUE;
     MCOMMA_DETECT_1 : boolean := TRUE;
     OOBDETECT_THRESHOLD_0 : bit_vector := "110";
     OOBDETECT_THRESHOLD_1 : bit_vector := "110";
     OOB_CLK_DIVIDER_0 : integer := 4;
     OOB_CLK_DIVIDER_1 : integer := 4;
     PCI_EXPRESS_MODE_0 : boolean := FALSE;
     PCI_EXPRESS_MODE_1 : boolean := FALSE;
     PCOMMA_10B_VALUE_0 : bit_vector := "0101111100";
     PCOMMA_10B_VALUE_1 : bit_vector := "0101111100";
     PCOMMA_DETECT_0 : boolean := TRUE;
     PCOMMA_DETECT_1 : boolean := TRUE;
     PLLLKDET_CFG_0 : bit_vector := "101";
     PLLLKDET_CFG_1 : bit_vector := "101";
     PLL_COM_CFG_0 : bit_vector := X"21680A";
     PLL_COM_CFG_1 : bit_vector := X"21680A";
     PLL_CP_CFG_0 : bit_vector := X"00";
     PLL_CP_CFG_1 : bit_vector := X"00";
     PLL_DIVSEL_FB_0 : integer := 5;
     PLL_DIVSEL_FB_1 : integer := 5;
     PLL_DIVSEL_REF_0 : integer := 2;
     PLL_DIVSEL_REF_1 : integer := 2;
     PLL_RXDIVSEL_OUT_0 : integer := 1;
     PLL_RXDIVSEL_OUT_1 : integer := 1;
     PLL_SATA_0 : boolean := FALSE;
     PLL_SATA_1 : boolean := FALSE;
     PLL_SOURCE_0 : string := "PLL0";
     PLL_SOURCE_1 : string := "PLL0";
     PLL_TXDIVSEL_OUT_0 : integer := 1;
     PLL_TXDIVSEL_OUT_1 : integer := 1;
     PMA_CDR_SCAN_0 : bit_vector := X"6404040";
     PMA_CDR_SCAN_1 : bit_vector := X"6404040";
     PMA_COM_CFG_EAST : bit_vector := X"000008000";
     PMA_COM_CFG_WEST : bit_vector := X"00000A000";
     PMA_RXSYNC_CFG_0 : bit_vector := X"00";
     PMA_RXSYNC_CFG_1 : bit_vector := X"00";
     PMA_RX_CFG_0 : bit_vector := X"05CE048";
     PMA_RX_CFG_1 : bit_vector := X"05CE048";
     PMA_TX_CFG_0 : bit_vector := X"00082";
     PMA_TX_CFG_1 : bit_vector := X"00082";
     RCV_TERM_GND_0 : boolean := FALSE;
     RCV_TERM_GND_1 : boolean := FALSE;
     RCV_TERM_VTTRX_0 : boolean := TRUE;
     RCV_TERM_VTTRX_1 : boolean := TRUE;
     RXEQ_CFG_0 : bit_vector := "01111011";
     RXEQ_CFG_1 : bit_vector := "01111011";
     RXPRBSERR_LOOPBACK_0 : bit := '0';
     RXPRBSERR_LOOPBACK_1 : bit := '0';
     RX_BUFFER_USE_0 : boolean := TRUE;
     RX_BUFFER_USE_1 : boolean := TRUE;
     RX_DECODE_SEQ_MATCH_0 : boolean := TRUE;
     RX_DECODE_SEQ_MATCH_1 : boolean := TRUE;
     RX_EN_IDLE_HOLD_CDR_0 : boolean := FALSE;
     RX_EN_IDLE_HOLD_CDR_1 : boolean := FALSE;
     RX_EN_IDLE_RESET_BUF_0 : boolean := TRUE;
     RX_EN_IDLE_RESET_BUF_1 : boolean := TRUE;
     RX_EN_IDLE_RESET_FR_0 : boolean := TRUE;
     RX_EN_IDLE_RESET_FR_1 : boolean := TRUE;
     RX_EN_IDLE_RESET_PH_0 : boolean := TRUE;
     RX_EN_IDLE_RESET_PH_1 : boolean := TRUE;
     RX_EN_MODE_RESET_BUF_0 : boolean := TRUE;
     RX_EN_MODE_RESET_BUF_1 : boolean := TRUE;
     RX_IDLE_HI_CNT_0 : bit_vector := "1000";
     RX_IDLE_HI_CNT_1 : bit_vector := "1000";
     RX_IDLE_LO_CNT_0 : bit_vector := "0000";
     RX_IDLE_LO_CNT_1 : bit_vector := "0000";
     RX_LOSS_OF_SYNC_FSM_0 : boolean := FALSE;
     RX_LOSS_OF_SYNC_FSM_1 : boolean := FALSE;
     RX_LOS_INVALID_INCR_0 : integer := 1;
     RX_LOS_INVALID_INCR_1 : integer := 1;
     RX_LOS_THRESHOLD_0 : integer := 4;
     RX_LOS_THRESHOLD_1 : integer := 4;
     RX_SLIDE_MODE_0 : string := "PCS";
     RX_SLIDE_MODE_1 : string := "PCS";
     RX_STATUS_FMT_0 : string := "PCIE";
     RX_STATUS_FMT_1 : string := "PCIE";
     RX_XCLK_SEL_0 : string := "RXREC";
     RX_XCLK_SEL_1 : string := "RXREC";
     SATA_BURST_VAL_0 : bit_vector := "100";
     SATA_BURST_VAL_1 : bit_vector := "100";
     SATA_IDLE_VAL_0 : bit_vector := "011";
     SATA_IDLE_VAL_1 : bit_vector := "011";
     SATA_MAX_BURST_0 : integer := 7;
     SATA_MAX_BURST_1 : integer := 7;
     SATA_MAX_INIT_0 : integer := 22;
     SATA_MAX_INIT_1 : integer := 22;
     SATA_MAX_WAKE_0 : integer := 7;
     SATA_MAX_WAKE_1 : integer := 7;
     SATA_MIN_BURST_0 : integer := 4;
     SATA_MIN_BURST_1 : integer := 4;
     SATA_MIN_INIT_0 : integer := 12;
     SATA_MIN_INIT_1 : integer := 12;
     SATA_MIN_WAKE_0 : integer := 4;
     SATA_MIN_WAKE_1 : integer := 4;
     SIM_GTPRESET_SPEEDUP : integer := 0;
     SIM_RECEIVER_DETECT_PASS : boolean := FALSE;
     SIM_REFCLK0_SOURCE : bit_vector := "000";
     SIM_REFCLK1_SOURCE : bit_vector := "000";
     SIM_TX_ELEC_IDLE_LEVEL : string := "X";
     SIM_VERSION : string := "2.0";
     TERMINATION_CTRL_0 : bit_vector := "10100";
     TERMINATION_CTRL_1 : bit_vector := "10100";
     TERMINATION_OVRD_0 : boolean := FALSE;
     TERMINATION_OVRD_1 : boolean := FALSE;
     TRANS_TIME_FROM_P2_0 : bit_vector := X"03C";
     TRANS_TIME_FROM_P2_1 : bit_vector := X"03C";
     TRANS_TIME_NON_P2_0 : bit_vector := X"19";
     TRANS_TIME_NON_P2_1 : bit_vector := X"19";
     TRANS_TIME_TO_P2_0 : bit_vector := X"064";
     TRANS_TIME_TO_P2_1 : bit_vector := X"064";
     TST_ATTR_0 : bit_vector := X"00000000";
     TST_ATTR_1 : bit_vector := X"00000000";
     TXRX_INVERT_0 : bit_vector := "011";
     TXRX_INVERT_1 : bit_vector := "011";
     TX_BUFFER_USE_0 : boolean := FALSE;
     TX_BUFFER_USE_1 : boolean := FALSE;
     TX_DETECT_RX_CFG_0 : bit_vector := X"1832";
     TX_DETECT_RX_CFG_1 : bit_vector := X"1832";
     TX_IDLE_DELAY_0 : bit_vector := "011";
     TX_IDLE_DELAY_1 : bit_vector := "011";
     TX_TDCC_CFG_0 : bit_vector := "00";
     TX_TDCC_CFG_1 : bit_vector := "00";
     TX_XCLK_SEL_0 : string := "TXUSR";
     TX_XCLK_SEL_1 : string := "TXUSR"
  );
  port (
     DRDY : out std_ulogic;
     DRPDO : out std_logic_vector(15 downto 0);
     GTPCLKFBEAST : out std_logic_vector(1 downto 0);
     GTPCLKFBWEST : out std_logic_vector(1 downto 0);
     GTPCLKOUT0 : out std_logic_vector(1 downto 0);
     GTPCLKOUT1 : out std_logic_vector(1 downto 0);
     PHYSTATUS0 : out std_ulogic;
     PHYSTATUS1 : out std_ulogic;
     PLLLKDET0 : out std_ulogic;
     PLLLKDET1 : out std_ulogic;
     RCALOUTEAST : out std_logic_vector(4 downto 0);
     RCALOUTWEST : out std_logic_vector(4 downto 0);
     REFCLKOUT0 : out std_ulogic;
     REFCLKOUT1 : out std_ulogic;
     REFCLKPLL0 : out std_ulogic;
     REFCLKPLL1 : out std_ulogic;
     RESETDONE0 : out std_ulogic;
     RESETDONE1 : out std_ulogic;
     RXBUFSTATUS0 : out std_logic_vector(2 downto 0);
     RXBUFSTATUS1 : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED0 : out std_ulogic;
     RXBYTEISALIGNED1 : out std_ulogic;
     RXBYTEREALIGN0 : out std_ulogic;
     RXBYTEREALIGN1 : out std_ulogic;
     RXCHANBONDSEQ0 : out std_ulogic;
     RXCHANBONDSEQ1 : out std_ulogic;
     RXCHANISALIGNED0 : out std_ulogic;
     RXCHANISALIGNED1 : out std_ulogic;
     RXCHANREALIGN0 : out std_ulogic;
     RXCHANREALIGN1 : out std_ulogic;
     RXCHARISCOMMA0 : out std_logic_vector(3 downto 0);
     RXCHARISCOMMA1 : out std_logic_vector(3 downto 0);
     RXCHARISK0 : out std_logic_vector(3 downto 0);
     RXCHARISK1 : out std_logic_vector(3 downto 0);
     RXCHBONDO : out std_logic_vector(2 downto 0);
     RXCLKCORCNT0 : out std_logic_vector(2 downto 0);
     RXCLKCORCNT1 : out std_logic_vector(2 downto 0);
     RXCOMMADET0 : out std_ulogic;
     RXCOMMADET1 : out std_ulogic;
     RXDATA0 : out std_logic_vector(31 downto 0);
     RXDATA1 : out std_logic_vector(31 downto 0);
     RXDISPERR0 : out std_logic_vector(3 downto 0);
     RXDISPERR1 : out std_logic_vector(3 downto 0);
     RXELECIDLE0 : out std_ulogic;
     RXELECIDLE1 : out std_ulogic;
     RXLOSSOFSYNC0 : out std_logic_vector(1 downto 0);
     RXLOSSOFSYNC1 : out std_logic_vector(1 downto 0);
     RXNOTINTABLE0 : out std_logic_vector(3 downto 0);
     RXNOTINTABLE1 : out std_logic_vector(3 downto 0);
     RXPRBSERR0 : out std_ulogic;
     RXPRBSERR1 : out std_ulogic;
     RXRECCLK0 : out std_ulogic;
     RXRECCLK1 : out std_ulogic;
     RXRUNDISP0 : out std_logic_vector(3 downto 0);
     RXRUNDISP1 : out std_logic_vector(3 downto 0);
     RXSTATUS0 : out std_logic_vector(2 downto 0);
     RXSTATUS1 : out std_logic_vector(2 downto 0);
     RXVALID0 : out std_ulogic;
     RXVALID1 : out std_ulogic;
     TSTOUT0 : out std_logic_vector(4 downto 0);
     TSTOUT1 : out std_logic_vector(4 downto 0);
     TXBUFSTATUS0 : out std_logic_vector(1 downto 0);
     TXBUFSTATUS1 : out std_logic_vector(1 downto 0);
     TXKERR0 : out std_logic_vector(3 downto 0);
     TXKERR1 : out std_logic_vector(3 downto 0);
     TXN0 : out std_ulogic;
     TXN1 : out std_ulogic;
     TXOUTCLK0 : out std_ulogic;
     TXOUTCLK1 : out std_ulogic;
     TXP0 : out std_ulogic;
     TXP1 : out std_ulogic;
     TXRUNDISP0 : out std_logic_vector(3 downto 0);
     TXRUNDISP1 : out std_logic_vector(3 downto 0);
     CLK00 : in std_ulogic;
     CLK01 : in std_ulogic;
     CLK10 : in std_ulogic;
     CLK11 : in std_ulogic;
     CLKINEAST0 : in std_ulogic;
     CLKINEAST1 : in std_ulogic;
     CLKINWEST0 : in std_ulogic;
     CLKINWEST1 : in std_ulogic;
     DADDR : in std_logic_vector(7 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     GATERXELECIDLE0 : in std_ulogic;
     GATERXELECIDLE1 : in std_ulogic;
     GCLK00 : in std_ulogic;
     GCLK01 : in std_ulogic;
     GCLK10 : in std_ulogic;
     GCLK11 : in std_ulogic;
     GTPCLKFBSEL0EAST : in std_logic_vector(1 downto 0);
     GTPCLKFBSEL0WEST : in std_logic_vector(1 downto 0);
     GTPCLKFBSEL1EAST : in std_logic_vector(1 downto 0);
     GTPCLKFBSEL1WEST : in std_logic_vector(1 downto 0);
     GTPRESET0 : in std_ulogic;
     GTPRESET1 : in std_ulogic;
     GTPTEST0 : in std_logic_vector(7 downto 0);
     GTPTEST1 : in std_logic_vector(7 downto 0);
     IGNORESIGDET0 : in std_ulogic;
     IGNORESIGDET1 : in std_ulogic;
     INTDATAWIDTH0 : in std_ulogic;
     INTDATAWIDTH1 : in std_ulogic;
     LOOPBACK0 : in std_logic_vector(2 downto 0);
     LOOPBACK1 : in std_logic_vector(2 downto 0);
     PLLCLK00 : in std_ulogic;
     PLLCLK01 : in std_ulogic;
     PLLCLK10 : in std_ulogic;
     PLLCLK11 : in std_ulogic;
     PLLLKDETEN0 : in std_ulogic;
     PLLLKDETEN1 : in std_ulogic;
     PLLPOWERDOWN0 : in std_ulogic;
     PLLPOWERDOWN1 : in std_ulogic;
     PRBSCNTRESET0 : in std_ulogic;
     PRBSCNTRESET1 : in std_ulogic;
     RCALINEAST : in std_logic_vector(4 downto 0);
     RCALINWEST : in std_logic_vector(4 downto 0);
     REFCLKPWRDNB0 : in std_ulogic;
     REFCLKPWRDNB1 : in std_ulogic;
     REFSELDYPLL0 : in std_logic_vector(2 downto 0);
     REFSELDYPLL1 : in std_logic_vector(2 downto 0);
     RXBUFRESET0 : in std_ulogic;
     RXBUFRESET1 : in std_ulogic;
     RXCDRRESET0 : in std_ulogic;
     RXCDRRESET1 : in std_ulogic;
     RXCHBONDI : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER0 : in std_ulogic;
     RXCHBONDMASTER1 : in std_ulogic;
     RXCHBONDSLAVE0 : in std_ulogic;
     RXCHBONDSLAVE1 : in std_ulogic;
     RXCOMMADETUSE0 : in std_ulogic;
     RXCOMMADETUSE1 : in std_ulogic;
     RXDATAWIDTH0 : in std_logic_vector(1 downto 0);
     RXDATAWIDTH1 : in std_logic_vector(1 downto 0);
     RXDEC8B10BUSE0 : in std_ulogic;
     RXDEC8B10BUSE1 : in std_ulogic;
     RXENCHANSYNC0 : in std_ulogic;
     RXENCHANSYNC1 : in std_ulogic;
     RXENMCOMMAALIGN0 : in std_ulogic;
     RXENMCOMMAALIGN1 : in std_ulogic;
     RXENPCOMMAALIGN0 : in std_ulogic;
     RXENPCOMMAALIGN1 : in std_ulogic;
     RXENPMAPHASEALIGN0 : in std_ulogic;
     RXENPMAPHASEALIGN1 : in std_ulogic;
     RXENPRBSTST0 : in std_logic_vector(2 downto 0);
     RXENPRBSTST1 : in std_logic_vector(2 downto 0);
     RXEQMIX0 : in std_logic_vector(1 downto 0);
     RXEQMIX1 : in std_logic_vector(1 downto 0);
     RXN0 : in std_ulogic;
     RXN1 : in std_ulogic;
     RXP0 : in std_ulogic;
     RXP1 : in std_ulogic;
     RXPMASETPHASE0 : in std_ulogic;
     RXPMASETPHASE1 : in std_ulogic;
     RXPOLARITY0 : in std_ulogic;
     RXPOLARITY1 : in std_ulogic;
     RXPOWERDOWN0 : in std_logic_vector(1 downto 0);
     RXPOWERDOWN1 : in std_logic_vector(1 downto 0);
     RXRESET0 : in std_ulogic;
     RXRESET1 : in std_ulogic;
     RXSLIDE0 : in std_ulogic;
     RXSLIDE1 : in std_ulogic;
     RXUSRCLK0 : in std_ulogic;
     RXUSRCLK1 : in std_ulogic;
     RXUSRCLK20 : in std_ulogic;
     RXUSRCLK21 : in std_ulogic;
     TSTCLK0 : in std_ulogic;
     TSTCLK1 : in std_ulogic;
     TSTIN0 : in std_logic_vector(11 downto 0);
     TSTIN1 : in std_logic_vector(11 downto 0);
     TXBUFDIFFCTRL0 : in std_logic_vector(2 downto 0);
     TXBUFDIFFCTRL1 : in std_logic_vector(2 downto 0);
     TXBYPASS8B10B0 : in std_logic_vector(3 downto 0);
     TXBYPASS8B10B1 : in std_logic_vector(3 downto 0);
     TXCHARDISPMODE0 : in std_logic_vector(3 downto 0);
     TXCHARDISPMODE1 : in std_logic_vector(3 downto 0);
     TXCHARDISPVAL0 : in std_logic_vector(3 downto 0);
     TXCHARDISPVAL1 : in std_logic_vector(3 downto 0);
     TXCHARISK0 : in std_logic_vector(3 downto 0);
     TXCHARISK1 : in std_logic_vector(3 downto 0);
     TXCOMSTART0 : in std_ulogic;
     TXCOMSTART1 : in std_ulogic;
     TXCOMTYPE0 : in std_ulogic;
     TXCOMTYPE1 : in std_ulogic;
     TXDATA0 : in std_logic_vector(31 downto 0);
     TXDATA1 : in std_logic_vector(31 downto 0);
     TXDATAWIDTH0 : in std_logic_vector(1 downto 0);
     TXDATAWIDTH1 : in std_logic_vector(1 downto 0);
     TXDETECTRX0 : in std_ulogic;
     TXDETECTRX1 : in std_ulogic;
     TXDIFFCTRL0 : in std_logic_vector(3 downto 0);
     TXDIFFCTRL1 : in std_logic_vector(3 downto 0);
     TXELECIDLE0 : in std_ulogic;
     TXELECIDLE1 : in std_ulogic;
     TXENC8B10BUSE0 : in std_ulogic;
     TXENC8B10BUSE1 : in std_ulogic;
     TXENPMAPHASEALIGN0 : in std_ulogic;
     TXENPMAPHASEALIGN1 : in std_ulogic;
     TXENPRBSTST0 : in std_logic_vector(2 downto 0);
     TXENPRBSTST1 : in std_logic_vector(2 downto 0);
     TXINHIBIT0 : in std_ulogic;
     TXINHIBIT1 : in std_ulogic;
     TXPDOWNASYNCH0 : in std_ulogic;
     TXPDOWNASYNCH1 : in std_ulogic;
     TXPMASETPHASE0 : in std_ulogic;
     TXPMASETPHASE1 : in std_ulogic;
     TXPOLARITY0 : in std_ulogic;
     TXPOLARITY1 : in std_ulogic;
     TXPOWERDOWN0 : in std_logic_vector(1 downto 0);
     TXPOWERDOWN1 : in std_logic_vector(1 downto 0);
     TXPRBSFORCEERR0 : in std_ulogic;
     TXPRBSFORCEERR1 : in std_ulogic;
     TXPREEMPHASIS0 : in std_logic_vector(2 downto 0);
     TXPREEMPHASIS1 : in std_logic_vector(2 downto 0);
     TXRESET0 : in std_ulogic;
     TXRESET1 : in std_ulogic;
     TXUSRCLK0 : in std_ulogic;
     TXUSRCLK1 : in std_ulogic;
     TXUSRCLK20 : in std_ulogic;
     TXUSRCLK21 : in std_ulogic;
     USRCODEERR0 : in std_ulogic;
     USRCODEERR1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTPA1_DUAL : component is "PRIMITIVE";

----- component GTXE1 -----
component GTXE1
  generic (
     AC_CAP_DIS : boolean := TRUE;
     ALIGN_COMMA_WORD : integer := 1;
     BGTEST_CFG : bit_vector := "00";
     BIAS_CFG : bit_vector := X"00000";
     CDR_PH_ADJ_TIME : bit_vector := "10100";
     CHAN_BOND_1_MAX_SKEW : integer := 7;
     CHAN_BOND_2_MAX_SKEW : integer := 1;
     CHAN_BOND_KEEP_ALIGN : boolean := FALSE;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0001001010";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0110111100";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100111100";
     CHAN_BOND_SEQ_2_CFG : bit_vector := "00000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : boolean := FALSE;
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_CORRECT_USE : boolean := TRUE;
     CLK_COR_ADJ_LEN : integer := 1;
     CLK_COR_DET_LEN : integer := 1;
     CLK_COR_INSERT_IDLE_FLAG : boolean := FALSE;
     CLK_COR_KEEP_IDLE : boolean := FALSE;
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : boolean := TRUE;
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : boolean := FALSE;
     CM_TRIM : bit_vector := "01";
     COMMA_10B_ENABLE : bit_vector := "1111111111";
     COMMA_DOUBLE : boolean := FALSE;
     COM_BURST_VAL : bit_vector := "1111";
     DEC_MCOMMA_DETECT : boolean := TRUE;
     DEC_PCOMMA_DETECT : boolean := TRUE;
     DEC_VALID_COMMA_ONLY : boolean := TRUE;
     DFE_CAL_TIME : bit_vector := "01100";
     DFE_CFG : bit_vector := "00011011";
     GEARBOX_ENDEC : bit_vector := "000";
     GEN_RXUSRCLK : boolean := TRUE;
     GEN_TXUSRCLK : boolean := TRUE;
     GTX_CFG_PWRUP : boolean := TRUE;
     MCOMMA_10B_VALUE : bit_vector := "1010000011";
     MCOMMA_DETECT : boolean := TRUE;
     OOBDETECT_THRESHOLD : bit_vector := "011";
     PCI_EXPRESS_MODE : boolean := FALSE;
     PCOMMA_10B_VALUE : bit_vector := "0101111100";
     PCOMMA_DETECT : boolean := TRUE;
     PMA_CAS_CLK_EN : boolean := FALSE;
     PMA_CDR_SCAN : bit_vector := X"640404C";
     PMA_CFG : bit_vector := X"0040000040000000003";
     PMA_RXSYNC_CFG : bit_vector := X"00";
     PMA_RX_CFG : bit_vector := X"05CE048";
     PMA_TX_CFG : bit_vector := X"00082";
     POWER_SAVE : bit_vector := "0000110100";
     RCV_TERM_GND : boolean := FALSE;
     RCV_TERM_VTTRX : boolean := TRUE;
     RXGEARBOX_USE : boolean := FALSE;
     RXPLL_COM_CFG : bit_vector := X"21680A";
     RXPLL_CP_CFG : bit_vector := X"00";
     RXPLL_DIVSEL45_FB : integer := 5;
     RXPLL_DIVSEL_FB : integer := 2;
     RXPLL_DIVSEL_OUT : integer := 1;
     RXPLL_DIVSEL_REF : integer := 1;
     RXPLL_LKDET_CFG : bit_vector := "111";
     RXPRBSERR_LOOPBACK : bit := '0';
     RXRECCLK_CTRL : string := "RXRECCLKPCS";
     RXRECCLK_DLY : bit_vector := "0000000000";
     RXUSRCLK_DLY : bit_vector := X"0000";
     RX_BUFFER_USE : boolean := TRUE;
     RX_CLK25_DIVIDER : integer := 6;
     RX_DATA_WIDTH : integer := 20;
     RX_DECODE_SEQ_MATCH : boolean := TRUE;
     RX_DLYALIGN_CTRINC : bit_vector := "0100";
     RX_DLYALIGN_EDGESET : bit_vector := "00110";
     RX_DLYALIGN_LPFINC : bit_vector := "0111";
     RX_DLYALIGN_MONSEL : bit_vector := "000";
     RX_DLYALIGN_OVRDSETTING : bit_vector := "00000000";
     RX_EN_IDLE_HOLD_CDR : boolean := FALSE;
     RX_EN_IDLE_HOLD_DFE : boolean := TRUE;
     RX_EN_IDLE_RESET_BUF : boolean := TRUE;
     RX_EN_IDLE_RESET_FR : boolean := TRUE;
     RX_EN_IDLE_RESET_PH : boolean := TRUE;
     RX_EN_MODE_RESET_BUF : boolean := TRUE;
     RX_EN_RATE_RESET_BUF : boolean := TRUE;
     RX_EN_REALIGN_RESET_BUF : boolean := FALSE;
     RX_EN_REALIGN_RESET_BUF2 : boolean := FALSE;
     RX_EYE_OFFSET : bit_vector := X"4C";
     RX_EYE_SCANMODE : bit_vector := "00";
     RX_FIFO_ADDR_MODE : string := "FULL";
     RX_IDLE_HI_CNT : bit_vector := "1000";
     RX_IDLE_LO_CNT : bit_vector := "0000";
     RX_LOSS_OF_SYNC_FSM : boolean := FALSE;
     RX_LOS_INVALID_INCR : integer := 1;
     RX_LOS_THRESHOLD : integer := 4;
     RX_OVERSAMPLE_MODE : boolean := FALSE;
     RX_SLIDE_AUTO_WAIT : integer := 5;
     RX_SLIDE_MODE : string := "OFF";
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COMSAS : integer := 52;
     SAS_MIN_COMSAS : integer := 40;
     SATA_BURST_VAL : bit_vector := "100";
     SATA_IDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 7;
     SATA_MAX_INIT : integer := 22;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : boolean := TRUE;
     SIM_GTXRESET_SPEEDUP : integer := 1;
     SIM_RECEIVER_DETECT_PASS : boolean := TRUE;
     SIM_RXREFCLK_SOURCE : bit_vector := "000";
     SIM_TXREFCLK_SOURCE : bit_vector := "000";
     SIM_TX_ELEC_IDLE_LEVEL : string := "X";
     SIM_VERSION : string := "2.0";
     TERMINATION_CTRL : bit_vector := "10100";
     TERMINATION_OVRD : boolean := FALSE;
     TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     TRANS_TIME_NON_P2 : bit_vector := X"19";
     TRANS_TIME_RATE : bit_vector := X"0E";
     TRANS_TIME_TO_P2 : bit_vector := X"064";
     TST_ATTR : bit_vector := X"00000000";
     TXDRIVE_LOOPBACK_HIZ : boolean := FALSE;
     TXDRIVE_LOOPBACK_PD : boolean := FALSE;
     TXGEARBOX_USE : boolean := FALSE;
     TXOUTCLK_CTRL : string := "TXOUTCLKPCS";
     TXOUTCLK_DLY : bit_vector := "0000000000";
     TXPLL_COM_CFG : bit_vector := X"21680A";
     TXPLL_CP_CFG : bit_vector := X"00";
     TXPLL_DIVSEL45_FB : integer := 5;
     TXPLL_DIVSEL_FB : integer := 2;
     TXPLL_DIVSEL_OUT : integer := 1;
     TXPLL_DIVSEL_REF : integer := 1;
     TXPLL_LKDET_CFG : bit_vector := "111";
     TXPLL_SATA : bit_vector := "00";
     TX_BUFFER_USE : boolean := TRUE;
     TX_BYTECLK_CFG : bit_vector := X"00";
     TX_CLK25_DIVIDER : integer := 6;
     TX_CLK_SOURCE : string := "RXPLL";
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH_0 : bit_vector := "11010";
     TX_DEEMPH_1 : bit_vector := "10000";
     TX_DETECT_RX_CFG : bit_vector := X"1832";
     TX_DLYALIGN_CTRINC : bit_vector := "0100";
     TX_DLYALIGN_LPFINC : bit_vector := "0110";
     TX_DLYALIGN_MONSEL : bit_vector := "000";
     TX_DLYALIGN_OVRDSETTING : bit_vector := "10000000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EN_RATE_RESET_BUF : boolean := TRUE;
     TX_IDLE_ASSERT_DELAY : bit_vector := "100";
     TX_IDLE_DEASSERT_DELAY : bit_vector := "010";
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_OVERSAMPLE_MODE : boolean := FALSE;
     TX_PMADATA_OPT : bit := '0';
     TX_TDCC_CFG : bit_vector := "11";
     TX_USRCLK_CFG : bit_vector := X"00";
     TX_XCLK_SEL : string := "TXUSR"
  );
  port (
     COMFINISH : out std_ulogic;
     COMINITDET : out std_ulogic;
     COMSASDET : out std_ulogic;
     COMWAKEDET : out std_ulogic;
     DFECLKDLYADJMON : out std_logic_vector(5 downto 0);
     DFEEYEDACMON : out std_logic_vector(4 downto 0);
     DFESENSCAL : out std_logic_vector(2 downto 0);
     DFETAP1MONITOR : out std_logic_vector(4 downto 0);
     DFETAP2MONITOR : out std_logic_vector(4 downto 0);
     DFETAP3MONITOR : out std_logic_vector(3 downto 0);
     DFETAP4MONITOR : out std_logic_vector(3 downto 0);
     DRDY : out std_ulogic;
     DRPDO : out std_logic_vector(15 downto 0);
     MGTREFCLKFAB : out std_logic_vector(1 downto 0);
     PHYSTATUS : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(3 downto 0);
     RXCHARISK : out std_logic_vector(3 downto 0);
     RXCHBONDO : out std_logic_vector(3 downto 0);
     RXCLKCORCNT : out std_logic_vector(2 downto 0);
     RXCOMMADET : out std_ulogic;
     RXDATA : out std_logic_vector(31 downto 0);
     RXDATAVALID : out std_ulogic;
     RXDISPERR : out std_logic_vector(3 downto 0);
     RXDLYALIGNMONITOR : out std_logic_vector(7 downto 0);
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(2 downto 0);
     RXHEADERVALID : out std_ulogic;
     RXLOSSOFSYNC : out std_logic_vector(1 downto 0);
     RXNOTINTABLE : out std_logic_vector(3 downto 0);
     RXOVERSAMPLEERR : out std_ulogic;
     RXPLLLKDET : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLK : out std_ulogic;
     RXRECCLKPCS : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXRUNDISP : out std_logic_vector(3 downto 0);
     RXSTARTOFSEQ : out std_ulogic;
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXVALID : out std_ulogic;
     TSTOUT : out std_logic_vector(9 downto 0);
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXDLYALIGNMONITOR : out std_logic_vector(7 downto 0);
     TXGEARBOXREADY : out std_ulogic;
     TXKERR : out std_logic_vector(3 downto 0);
     TXN : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXP : out std_ulogic;
     TXPLLLKDET : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXRUNDISP : out std_logic_vector(3 downto 0);
     DADDR : in std_logic_vector(7 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DFECLKDLYADJ : in std_logic_vector(5 downto 0);
     DFEDLYOVRD : in std_ulogic;
     DFETAP1 : in std_logic_vector(4 downto 0);
     DFETAP2 : in std_logic_vector(4 downto 0);
     DFETAP3 : in std_logic_vector(3 downto 0);
     DFETAP4 : in std_logic_vector(3 downto 0);
     DFETAPOVRD : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     GATERXELECIDLE : in std_ulogic;
     GREFCLKRX : in std_ulogic;
     GREFCLKTX : in std_ulogic;
     GTXRXRESET : in std_ulogic;
     GTXTEST : in std_logic_vector(12 downto 0);
     GTXTXRESET : in std_ulogic;
     IGNORESIGDET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     MGTREFCLKRX : in std_logic_vector(1 downto 0);
     MGTREFCLKTX : in std_logic_vector(1 downto 0);
     NORTHREFCLKRX : in std_logic_vector(1 downto 0);
     NORTHREFCLKTX : in std_logic_vector(1 downto 0);
     PERFCLKRX : in std_ulogic;
     PERFCLKTX : in std_ulogic;
     PLLRXRESET : in std_ulogic;
     PLLTXRESET : in std_ulogic;
     PRBSCNTRESET : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCHBONDI : in std_logic_vector(3 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETUSE : in std_ulogic;
     RXDEC8B10BUSE : in std_ulogic;
     RXDLYALIGNDISABLE : in std_ulogic;
     RXDLYALIGNMONENB : in std_ulogic := 'H';
     RXDLYALIGNOVERRIDE : in std_ulogic;
     RXDLYALIGNRESET : in std_ulogic;
     RXDLYALIGNSWPPRECURB : in std_ulogic;
     RXDLYALIGNUPDSW : in std_ulogic;
     RXENCHANSYNC : in std_ulogic;
     RXENMCOMMAALIGN : in std_ulogic;
     RXENPCOMMAALIGN : in std_ulogic;
     RXENPMAPHASEALIGN : in std_ulogic;
     RXENPRBSTST : in std_logic_vector(2 downto 0);
     RXENSAMPLEALIGN : in std_ulogic;
     RXEQMIX : in std_logic_vector(9 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXN : in std_ulogic;
     RXP : in std_ulogic;
     RXPLLLKDETEN : in std_ulogic;
     RXPLLPOWERDOWN : in std_ulogic;
     RXPLLREFSELDY : in std_logic_vector(2 downto 0);
     RXPMASETPHASE : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPOWERDOWN : in std_logic_vector(1 downto 0);
     RXRATE : in std_logic_vector(1 downto 0);
     RXRESET : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SOUTHREFCLKRX : in std_logic_vector(1 downto 0);
     SOUTHREFCLKTX : in std_logic_vector(1 downto 0);
     TSTCLK0 : in std_ulogic;
     TSTCLK1 : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXBYPASS8B10B : in std_logic_vector(3 downto 0);
     TXCHARDISPMODE : in std_logic_vector(3 downto 0);
     TXCHARDISPVAL : in std_logic_vector(3 downto 0);
     TXCHARISK : in std_logic_vector(3 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(31 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDLYALIGNDISABLE : in std_ulogic;
     TXDLYALIGNMONENB : in std_ulogic := 'H';
     TXDLYALIGNOVERRIDE : in std_ulogic;
     TXDLYALIGNRESET : in std_ulogic;
     TXDLYALIGNUPDSW : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXENC8B10BUSE : in std_ulogic;
     TXENPMAPHASEALIGN : in std_ulogic;
     TXENPRBSTST : in std_logic_vector(2 downto 0);
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXPDOWNASYNCH : in std_ulogic;
     TXPLLLKDETEN : in std_ulogic;
     TXPLLPOWERDOWN : in std_ulogic;
     TXPLLREFSELDY : in std_logic_vector(2 downto 0);
     TXPMASETPHASE : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTEMPHASIS : in std_logic_vector(4 downto 0);
     TXPOWERDOWN : in std_logic_vector(1 downto 0);
     TXPRBSFORCEERR : in std_ulogic;
     TXPREEMPHASIS : in std_logic_vector(3 downto 0);
     TXRATE : in std_logic_vector(1 downto 0);
     TXRESET : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic;
     USRCODEERR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTXE1 : component is "PRIMITIVE";

----- component IBUFDS_BLVDS_25 -----
component IBUFDS_BLVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_BLVDS_25 : component is "PRIMITIVE";

----- component IBUFDS_GTXE1 -----
component IBUFDS_GTXE1
  generic (
     CLKCM_CFG : boolean := TRUE;
     CLKRCV_TRST : boolean := TRUE;
     REFCLKOUT_DLY : bit_vector := b"0000000000"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTXE1 : component is "PRIMITIVE";

----- component IBUFDS_LDT_25 -----
component IBUFDS_LDT_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LDT_25 : component is "PRIMITIVE";

----- component IBUFDS_LVDSEXT_25 -----
component IBUFDS_LVDSEXT_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDSEXT_25 : component is "PRIMITIVE";

----- component IBUFDS_LVDSEXT_25_DCI -----
component IBUFDS_LVDSEXT_25_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDSEXT_25_DCI : component is "PRIMITIVE";

----- component IBUFDS_LVDSEXT_33 -----
component IBUFDS_LVDSEXT_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDSEXT_33 : component is "PRIMITIVE";

----- component IBUFDS_LVDSEXT_33_DCI -----
component IBUFDS_LVDSEXT_33_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDSEXT_33_DCI : component is "PRIMITIVE";

----- component IBUFDS_LVDS_25 -----
component IBUFDS_LVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDS_25 : component is "PRIMITIVE";

----- component IBUFDS_LVDS_25_DCI -----
component IBUFDS_LVDS_25_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDS_25_DCI : component is "PRIMITIVE";

----- component IBUFDS_LVDS_33 -----
component IBUFDS_LVDS_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDS_33 : component is "PRIMITIVE";

----- component IBUFDS_LVDS_33_DCI -----
component IBUFDS_LVDS_33_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVDS_33_DCI : component is "PRIMITIVE";

----- component IBUFDS_LVPECL_25 -----
component IBUFDS_LVPECL_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVPECL_25 : component is "PRIMITIVE";

----- component IBUFDS_LVPECL_33 -----
component IBUFDS_LVPECL_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_LVPECL_33 : component is "PRIMITIVE";

----- component IBUFDS_ULVDS_25 -----
component IBUFDS_ULVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_ULVDS_25 : component is "PRIMITIVE";

----- component IBUFG -----
component IBUFG
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG : component is "PRIMITIVE";

----- component IBUFGDS -----
component IBUFGDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DIFF_TERM : boolean := FALSE;
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS : component is "PRIMITIVE";

----- component IBUFGDS_BLVDS_25 -----
component IBUFGDS_BLVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_BLVDS_25 : component is "PRIMITIVE";

----- component IBUFGDS_DIFF_OUT -----
component IBUFGDS_DIFF_OUT
  generic (
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_DIFF_OUT : component is "PRIMITIVE";

----- component IBUFGDS_LDT_25 -----
component IBUFGDS_LDT_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LDT_25 : component is "PRIMITIVE";

----- component IBUFGDS_LVDSEXT_25 -----
component IBUFGDS_LVDSEXT_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDSEXT_25 : component is "PRIMITIVE";

----- component IBUFGDS_LVDSEXT_25_DCI -----
component IBUFGDS_LVDSEXT_25_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDSEXT_25_DCI : component is "PRIMITIVE";

----- component IBUFGDS_LVDSEXT_33 -----
component IBUFGDS_LVDSEXT_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDSEXT_33 : component is "PRIMITIVE";

----- component IBUFGDS_LVDSEXT_33_DCI -----
component IBUFGDS_LVDSEXT_33_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDSEXT_33_DCI : component is "PRIMITIVE";

----- component IBUFGDS_LVDS_25 -----
component IBUFGDS_LVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDS_25 : component is "PRIMITIVE";

----- component IBUFGDS_LVDS_25_DCI -----
component IBUFGDS_LVDS_25_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDS_25_DCI : component is "PRIMITIVE";

----- component IBUFGDS_LVDS_33 -----
component IBUFGDS_LVDS_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDS_33 : component is "PRIMITIVE";

----- component IBUFGDS_LVDS_33_DCI -----
component IBUFGDS_LVDS_33_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVDS_33_DCI : component is "PRIMITIVE";

----- component IBUFGDS_LVPECL_25 -----
component IBUFGDS_LVPECL_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVPECL_25 : component is "PRIMITIVE";

----- component IBUFGDS_LVPECL_33 -----
component IBUFGDS_LVPECL_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_LVPECL_33 : component is "PRIMITIVE";

----- component IBUFGDS_ULVDS_25 -----
component IBUFGDS_ULVDS_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFGDS_ULVDS_25 : component is "PRIMITIVE";

----- component IBUFG_AGP -----
component IBUFG_AGP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_AGP : component is "PRIMITIVE";

----- component IBUFG_CTT -----
component IBUFG_CTT
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_CTT : component is "PRIMITIVE";

----- component IBUFG_GTL -----
component IBUFG_GTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_GTL : component is "PRIMITIVE";

----- component IBUFG_GTLP -----
component IBUFG_GTLP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_GTLP : component is "PRIMITIVE";

----- component IBUFG_GTLP_DCI -----
component IBUFG_GTLP_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_GTLP_DCI : component is "PRIMITIVE";

----- component IBUFG_GTL_DCI -----
component IBUFG_GTL_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_GTL_DCI : component is "PRIMITIVE";

----- component IBUFG_HSTL_I -----
component IBUFG_HSTL_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_I : component is "PRIMITIVE";

----- component IBUFG_HSTL_II -----
component IBUFG_HSTL_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_II : component is "PRIMITIVE";

----- component IBUFG_HSTL_III -----
component IBUFG_HSTL_III
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_III : component is "PRIMITIVE";

----- component IBUFG_HSTL_III_18 -----
component IBUFG_HSTL_III_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_III_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_III_DCI -----
component IBUFG_HSTL_III_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_III_DCI : component is "PRIMITIVE";

----- component IBUFG_HSTL_III_DCI_18 -----
component IBUFG_HSTL_III_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_III_DCI_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_II_18 -----
component IBUFG_HSTL_II_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_II_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_II_DCI -----
component IBUFG_HSTL_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_II_DCI : component is "PRIMITIVE";

----- component IBUFG_HSTL_II_DCI_18 -----
component IBUFG_HSTL_II_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_II_DCI_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_IV -----
component IBUFG_HSTL_IV
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_IV : component is "PRIMITIVE";

----- component IBUFG_HSTL_IV_18 -----
component IBUFG_HSTL_IV_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_IV_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_IV_DCI -----
component IBUFG_HSTL_IV_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_IV_DCI : component is "PRIMITIVE";

----- component IBUFG_HSTL_IV_DCI_18 -----
component IBUFG_HSTL_IV_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_IV_DCI_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_I_18 -----
component IBUFG_HSTL_I_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_I_18 : component is "PRIMITIVE";

----- component IBUFG_HSTL_I_DCI -----
component IBUFG_HSTL_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_I_DCI : component is "PRIMITIVE";

----- component IBUFG_HSTL_I_DCI_18 -----
component IBUFG_HSTL_I_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_HSTL_I_DCI_18 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS12 -----
component IBUFG_LVCMOS12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS12 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS15 -----
component IBUFG_LVCMOS15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS15 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS18 -----
component IBUFG_LVCMOS18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS18 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS2 -----
component IBUFG_LVCMOS2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS2 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS25 -----
component IBUFG_LVCMOS25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS25 : component is "PRIMITIVE";

----- component IBUFG_LVCMOS33 -----
component IBUFG_LVCMOS33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVCMOS33 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_15 -----
component IBUFG_LVDCI_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_15 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_18 -----
component IBUFG_LVDCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_18 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_25 -----
component IBUFG_LVDCI_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_25 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_33 -----
component IBUFG_LVDCI_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_33 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_DV2_15 -----
component IBUFG_LVDCI_DV2_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_DV2_15 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_DV2_18 -----
component IBUFG_LVDCI_DV2_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_DV2_18 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_DV2_25 -----
component IBUFG_LVDCI_DV2_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_DV2_25 : component is "PRIMITIVE";

----- component IBUFG_LVDCI_DV2_33 -----
component IBUFG_LVDCI_DV2_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDCI_DV2_33 : component is "PRIMITIVE";

----- component IBUFG_LVDS -----
component IBUFG_LVDS
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVDS : component is "PRIMITIVE";

----- component IBUFG_LVPECL -----
component IBUFG_LVPECL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVPECL : component is "PRIMITIVE";

----- component IBUFG_LVTTL -----
component IBUFG_LVTTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_LVTTL : component is "PRIMITIVE";

----- component IBUFG_PCI33_3 -----
component IBUFG_PCI33_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_PCI33_3 : component is "PRIMITIVE";

----- component IBUFG_PCI33_5 -----
component IBUFG_PCI33_5
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_PCI33_5 : component is "PRIMITIVE";

----- component IBUFG_PCI66_3 -----
component IBUFG_PCI66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_PCI66_3 : component is "PRIMITIVE";

----- component IBUFG_PCIX -----
component IBUFG_PCIX
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_PCIX : component is "PRIMITIVE";

----- component IBUFG_PCIX66_3 -----
component IBUFG_PCIX66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_PCIX66_3 : component is "PRIMITIVE";

----- component IBUFG_SSTL18_I -----
component IBUFG_SSTL18_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL18_I : component is "PRIMITIVE";

----- component IBUFG_SSTL18_II -----
component IBUFG_SSTL18_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL18_II : component is "PRIMITIVE";

----- component IBUFG_SSTL18_II_DCI -----
component IBUFG_SSTL18_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL18_II_DCI : component is "PRIMITIVE";

----- component IBUFG_SSTL18_I_DCI -----
component IBUFG_SSTL18_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL18_I_DCI : component is "PRIMITIVE";

----- component IBUFG_SSTL2_I -----
component IBUFG_SSTL2_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL2_I : component is "PRIMITIVE";

----- component IBUFG_SSTL2_II -----
component IBUFG_SSTL2_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL2_II : component is "PRIMITIVE";

----- component IBUFG_SSTL2_II_DCI -----
component IBUFG_SSTL2_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL2_II_DCI : component is "PRIMITIVE";

----- component IBUFG_SSTL2_I_DCI -----
component IBUFG_SSTL2_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL2_I_DCI : component is "PRIMITIVE";

----- component IBUFG_SSTL3_I -----
component IBUFG_SSTL3_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL3_I : component is "PRIMITIVE";

----- component IBUFG_SSTL3_II -----
component IBUFG_SSTL3_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL3_II : component is "PRIMITIVE";

----- component IBUFG_SSTL3_II_DCI -----
component IBUFG_SSTL3_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL3_II_DCI : component is "PRIMITIVE";

----- component IBUFG_SSTL3_I_DCI -----
component IBUFG_SSTL3_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFG_SSTL3_I_DCI : component is "PRIMITIVE";

----- component IBUF_AGP -----
component IBUF_AGP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_AGP : component is "PRIMITIVE";

----- component IBUF_CTT -----
component IBUF_CTT
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_CTT : component is "PRIMITIVE";

----- component IBUF_GTL -----
component IBUF_GTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_GTL : component is "PRIMITIVE";

----- component IBUF_GTLP -----
component IBUF_GTLP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_GTLP : component is "PRIMITIVE";

----- component IBUF_GTLP_DCI -----
component IBUF_GTLP_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_GTLP_DCI : component is "PRIMITIVE";

----- component IBUF_GTL_DCI -----
component IBUF_GTL_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_GTL_DCI : component is "PRIMITIVE";

----- component IBUF_HSTL_I -----
component IBUF_HSTL_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_I : component is "PRIMITIVE";

----- component IBUF_HSTL_II -----
component IBUF_HSTL_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_II : component is "PRIMITIVE";

----- component IBUF_HSTL_III -----
component IBUF_HSTL_III
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_III : component is "PRIMITIVE";

----- component IBUF_HSTL_III_18 -----
component IBUF_HSTL_III_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_III_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_III_DCI -----
component IBUF_HSTL_III_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_III_DCI : component is "PRIMITIVE";

----- component IBUF_HSTL_III_DCI_18 -----
component IBUF_HSTL_III_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_III_DCI_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_II_18 -----
component IBUF_HSTL_II_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_II_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_II_DCI -----
component IBUF_HSTL_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_II_DCI : component is "PRIMITIVE";

----- component IBUF_HSTL_II_DCI_18 -----
component IBUF_HSTL_II_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_II_DCI_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_IV -----
component IBUF_HSTL_IV
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_IV : component is "PRIMITIVE";

----- component IBUF_HSTL_IV_18 -----
component IBUF_HSTL_IV_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_IV_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_IV_DCI -----
component IBUF_HSTL_IV_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_IV_DCI : component is "PRIMITIVE";

----- component IBUF_HSTL_IV_DCI_18 -----
component IBUF_HSTL_IV_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_IV_DCI_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_I_18 -----
component IBUF_HSTL_I_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_I_18 : component is "PRIMITIVE";

----- component IBUF_HSTL_I_DCI -----
component IBUF_HSTL_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_I_DCI : component is "PRIMITIVE";

----- component IBUF_HSTL_I_DCI_18 -----
component IBUF_HSTL_I_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_HSTL_I_DCI_18 : component is "PRIMITIVE";

----- component IBUF_LVCMOS12 -----
component IBUF_LVCMOS12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS12 : component is "PRIMITIVE";

----- component IBUF_LVCMOS15 -----
component IBUF_LVCMOS15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS15 : component is "PRIMITIVE";

----- component IBUF_LVCMOS18 -----
component IBUF_LVCMOS18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS18 : component is "PRIMITIVE";

----- component IBUF_LVCMOS2 -----
component IBUF_LVCMOS2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS2 : component is "PRIMITIVE";

----- component IBUF_LVCMOS25 -----
component IBUF_LVCMOS25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS25 : component is "PRIMITIVE";

----- component IBUF_LVCMOS33 -----
component IBUF_LVCMOS33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVCMOS33 : component is "PRIMITIVE";

----- component IBUF_LVDCI_15 -----
component IBUF_LVDCI_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_15 : component is "PRIMITIVE";

----- component IBUF_LVDCI_18 -----
component IBUF_LVDCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_18 : component is "PRIMITIVE";

----- component IBUF_LVDCI_25 -----
component IBUF_LVDCI_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_25 : component is "PRIMITIVE";

----- component IBUF_LVDCI_33 -----
component IBUF_LVDCI_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_33 : component is "PRIMITIVE";

----- component IBUF_LVDCI_DV2_15 -----
component IBUF_LVDCI_DV2_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_DV2_15 : component is "PRIMITIVE";

----- component IBUF_LVDCI_DV2_18 -----
component IBUF_LVDCI_DV2_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_DV2_18 : component is "PRIMITIVE";

----- component IBUF_LVDCI_DV2_25 -----
component IBUF_LVDCI_DV2_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_DV2_25 : component is "PRIMITIVE";

----- component IBUF_LVDCI_DV2_33 -----
component IBUF_LVDCI_DV2_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDCI_DV2_33 : component is "PRIMITIVE";

----- component IBUF_LVDS -----
component IBUF_LVDS
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVDS : component is "PRIMITIVE";

----- component IBUF_LVPECL -----
component IBUF_LVPECL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVPECL : component is "PRIMITIVE";

----- component IBUF_LVTTL -----
component IBUF_LVTTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_LVTTL : component is "PRIMITIVE";

----- component IBUF_PCI33_3 -----
component IBUF_PCI33_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_PCI33_3 : component is "PRIMITIVE";

----- component IBUF_PCI33_5 -----
component IBUF_PCI33_5
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_PCI33_5 : component is "PRIMITIVE";

----- component IBUF_PCI66_3 -----
component IBUF_PCI66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_PCI66_3 : component is "PRIMITIVE";

----- component IBUF_PCIX -----
component IBUF_PCIX
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_PCIX : component is "PRIMITIVE";

----- component IBUF_PCIX66_3 -----
component IBUF_PCIX66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_PCIX66_3 : component is "PRIMITIVE";

----- component IBUF_SSTL18_I -----
component IBUF_SSTL18_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL18_I : component is "PRIMITIVE";

----- component IBUF_SSTL18_II -----
component IBUF_SSTL18_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL18_II : component is "PRIMITIVE";

----- component IBUF_SSTL18_II_DCI -----
component IBUF_SSTL18_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL18_II_DCI : component is "PRIMITIVE";

----- component IBUF_SSTL18_I_DCI -----
component IBUF_SSTL18_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL18_I_DCI : component is "PRIMITIVE";

----- component IBUF_SSTL2_I -----
component IBUF_SSTL2_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL2_I : component is "PRIMITIVE";

----- component IBUF_SSTL2_II -----
component IBUF_SSTL2_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL2_II : component is "PRIMITIVE";

----- component IBUF_SSTL2_II_DCI -----
component IBUF_SSTL2_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL2_II_DCI : component is "PRIMITIVE";

----- component IBUF_SSTL2_I_DCI -----
component IBUF_SSTL2_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL2_I_DCI : component is "PRIMITIVE";

----- component IBUF_SSTL3_I -----
component IBUF_SSTL3_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL3_I : component is "PRIMITIVE";

----- component IBUF_SSTL3_II -----
component IBUF_SSTL3_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL3_II : component is "PRIMITIVE";

----- component IBUF_SSTL3_II_DCI -----
component IBUF_SSTL3_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL3_II_DCI : component is "PRIMITIVE";

----- component IBUF_SSTL3_I_DCI -----
component IBUF_SSTL3_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_SSTL3_I_DCI : component is "PRIMITIVE";

----- component ICAP_SPARTAN3A -----
component ICAP_SPARTAN3A
  port (
     BUSY : out std_ulogic;
     O : out std_logic_vector(7 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_logic_vector(7 downto 0);
     WRITE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAP_SPARTAN3A : component is "PRIMITIVE";

----- component ICAP_SPARTAN6 -----
component ICAP_SPARTAN6
  generic (
     DEVICE_ID : bit_vector := X"04000093";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     BUSY : out std_ulogic := '1';
     O : out std_logic_vector(15 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_logic_vector(15 downto 0);
     WRITE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAP_SPARTAN6 : component is "PRIMITIVE";

----- component ICAP_VIRTEX4 -----
component ICAP_VIRTEX4
  generic (
     ICAP_WIDTH : string := "X8"
  );
  port (
     BUSY : out std_ulogic;
     O : out std_logic_vector(31 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     WRITE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAP_VIRTEX4 : component is "PRIMITIVE";

----- component ICAP_VIRTEX5 -----
component ICAP_VIRTEX5
  generic (
     ICAP_WIDTH : string := "X8"
  );
  port (
     BUSY : out std_ulogic;
     O : out std_logic_vector(31 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     WRITE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAP_VIRTEX5 : component is "PRIMITIVE";

----- component ICAP_VIRTEX6 -----
component ICAP_VIRTEX6
  generic (
     DEVICE_ID : bit_vector := X"04244093";
     ICAP_WIDTH : string := "X8";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     BUSY : out std_ulogic := '1';
     O : out std_logic_vector(31 downto 0);
     CLK : in std_ulogic;
     CSB : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     RDWRB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAP_VIRTEX6 : component is "PRIMITIVE";

----- component IDDR2 -----
component IDDR2
  generic (
     DDR_ALIGNMENT : string := "NONE";
     INIT_Q0 : bit := '0';
     INIT_Q1 : bit := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q0 : out std_ulogic;
     Q1 : out std_ulogic;
     C0 : in std_ulogic;
     C1 : in std_ulogic;
     CE : in std_ulogic := 'H';
     D : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  IDDR2 : component is "PRIMITIVE";

----- component IDELAY -----
component IDELAY
  generic (
     IOBDELAY_TYPE : string := "DEFAULT";
     IOBDELAY_VALUE : integer := 0
  );
  port (
     O : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic;
     INC : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAY : component is "PRIMITIVE";

----- component IOBUFDS_BLVDS_25 -----
component IOBUFDS_BLVDS_25
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_BLVDS_25 : component is "PRIMITIVE";

----- component IOBUF_AGP -----
component IOBUF_AGP
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_AGP : component is "PRIMITIVE";

----- component IOBUF_CTT -----
component IOBUF_CTT
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_CTT : component is "PRIMITIVE";

----- component IOBUF_F_12 -----
component IOBUF_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_12 : component is "PRIMITIVE";

----- component IOBUF_F_16 -----
component IOBUF_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_16 : component is "PRIMITIVE";

----- component IOBUF_F_2 -----
component IOBUF_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_2 : component is "PRIMITIVE";

----- component IOBUF_F_24 -----
component IOBUF_F_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_24 : component is "PRIMITIVE";

----- component IOBUF_F_4 -----
component IOBUF_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_4 : component is "PRIMITIVE";

----- component IOBUF_F_6 -----
component IOBUF_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_6 : component is "PRIMITIVE";

----- component IOBUF_F_8 -----
component IOBUF_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_F_8 : component is "PRIMITIVE";

----- component IOBUF_GTL -----
component IOBUF_GTL
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_GTL : component is "PRIMITIVE";

----- component IOBUF_GTLP -----
component IOBUF_GTLP
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_GTLP : component is "PRIMITIVE";

----- component IOBUF_GTLP_DCI -----
component IOBUF_GTLP_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_GTLP_DCI : component is "PRIMITIVE";

----- component IOBUF_GTL_DCI -----
component IOBUF_GTL_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_GTL_DCI : component is "PRIMITIVE";

----- component IOBUF_HSTL_I -----
component IOBUF_HSTL_I
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_I : component is "PRIMITIVE";

----- component IOBUF_HSTL_II -----
component IOBUF_HSTL_II
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_II : component is "PRIMITIVE";

----- component IOBUF_HSTL_III -----
component IOBUF_HSTL_III
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_III : component is "PRIMITIVE";

----- component IOBUF_HSTL_III_18 -----
component IOBUF_HSTL_III_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_III_18 : component is "PRIMITIVE";

----- component IOBUF_HSTL_II_18 -----
component IOBUF_HSTL_II_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_II_18 : component is "PRIMITIVE";

----- component IOBUF_HSTL_II_DCI -----
component IOBUF_HSTL_II_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_II_DCI : component is "PRIMITIVE";

----- component IOBUF_HSTL_II_DCI_18 -----
component IOBUF_HSTL_II_DCI_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_II_DCI_18 : component is "PRIMITIVE";

----- component IOBUF_HSTL_IV -----
component IOBUF_HSTL_IV
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_IV : component is "PRIMITIVE";

----- component IOBUF_HSTL_IV_18 -----
component IOBUF_HSTL_IV_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_IV_18 : component is "PRIMITIVE";

----- component IOBUF_HSTL_IV_DCI -----
component IOBUF_HSTL_IV_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_IV_DCI : component is "PRIMITIVE";

----- component IOBUF_HSTL_IV_DCI_18 -----
component IOBUF_HSTL_IV_DCI_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_IV_DCI_18 : component is "PRIMITIVE";

----- component IOBUF_HSTL_I_18 -----
component IOBUF_HSTL_I_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_HSTL_I_18 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12 -----
component IOBUF_LVCMOS12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_F_2 -----
component IOBUF_LVCMOS12_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_F_4 -----
component IOBUF_LVCMOS12_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_F_6 -----
component IOBUF_LVCMOS12_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_F_8 -----
component IOBUF_LVCMOS12_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_S_2 -----
component IOBUF_LVCMOS12_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_S_4 -----
component IOBUF_LVCMOS12_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_S_6 -----
component IOBUF_LVCMOS12_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS12_S_8 -----
component IOBUF_LVCMOS12_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS12_S_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15 -----
component IOBUF_LVCMOS15
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_12 -----
component IOBUF_LVCMOS15_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_16 -----
component IOBUF_LVCMOS15_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_2 -----
component IOBUF_LVCMOS15_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_4 -----
component IOBUF_LVCMOS15_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_6 -----
component IOBUF_LVCMOS15_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_F_8 -----
component IOBUF_LVCMOS15_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_12 -----
component IOBUF_LVCMOS15_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_16 -----
component IOBUF_LVCMOS15_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_2 -----
component IOBUF_LVCMOS15_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_4 -----
component IOBUF_LVCMOS15_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_6 -----
component IOBUF_LVCMOS15_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS15_S_8 -----
component IOBUF_LVCMOS15_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS15_S_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18 -----
component IOBUF_LVCMOS18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_12 -----
component IOBUF_LVCMOS18_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_16 -----
component IOBUF_LVCMOS18_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_2 -----
component IOBUF_LVCMOS18_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_4 -----
component IOBUF_LVCMOS18_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_6 -----
component IOBUF_LVCMOS18_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_F_8 -----
component IOBUF_LVCMOS18_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_12 -----
component IOBUF_LVCMOS18_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_16 -----
component IOBUF_LVCMOS18_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_2 -----
component IOBUF_LVCMOS18_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_4 -----
component IOBUF_LVCMOS18_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_6 -----
component IOBUF_LVCMOS18_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS18_S_8 -----
component IOBUF_LVCMOS18_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS18_S_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS2 -----
component IOBUF_LVCMOS2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25 -----
component IOBUF_LVCMOS25
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_12 -----
component IOBUF_LVCMOS25_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_16 -----
component IOBUF_LVCMOS25_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_2 -----
component IOBUF_LVCMOS25_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_24 -----
component IOBUF_LVCMOS25_F_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_24 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_4 -----
component IOBUF_LVCMOS25_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_6 -----
component IOBUF_LVCMOS25_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_F_8 -----
component IOBUF_LVCMOS25_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_12 -----
component IOBUF_LVCMOS25_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_16 -----
component IOBUF_LVCMOS25_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_2 -----
component IOBUF_LVCMOS25_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_24 -----
component IOBUF_LVCMOS25_S_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_24 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_4 -----
component IOBUF_LVCMOS25_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_6 -----
component IOBUF_LVCMOS25_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS25_S_8 -----
component IOBUF_LVCMOS25_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS25_S_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33 -----
component IOBUF_LVCMOS33
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_12 -----
component IOBUF_LVCMOS33_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_16 -----
component IOBUF_LVCMOS33_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_2 -----
component IOBUF_LVCMOS33_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_24 -----
component IOBUF_LVCMOS33_F_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_24 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_4 -----
component IOBUF_LVCMOS33_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_6 -----
component IOBUF_LVCMOS33_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_F_8 -----
component IOBUF_LVCMOS33_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_12 -----
component IOBUF_LVCMOS33_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_12 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_16 -----
component IOBUF_LVCMOS33_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_16 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_2 -----
component IOBUF_LVCMOS33_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_24 -----
component IOBUF_LVCMOS33_S_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_24 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_4 -----
component IOBUF_LVCMOS33_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_6 -----
component IOBUF_LVCMOS33_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVCMOS33_S_8 -----
component IOBUF_LVCMOS33_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVCMOS33_S_8 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_15 -----
component IOBUF_LVDCI_15
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_15 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_18 -----
component IOBUF_LVDCI_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_18 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_25 -----
component IOBUF_LVDCI_25
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_25 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_33 -----
component IOBUF_LVDCI_33
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_33 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_DV2_15 -----
component IOBUF_LVDCI_DV2_15
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_DV2_15 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_DV2_18 -----
component IOBUF_LVDCI_DV2_18
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_DV2_18 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_DV2_25 -----
component IOBUF_LVDCI_DV2_25
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_DV2_25 : component is "PRIMITIVE";

----- component IOBUF_LVDCI_DV2_33 -----
component IOBUF_LVDCI_DV2_33
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDCI_DV2_33 : component is "PRIMITIVE";

----- component IOBUF_LVDS -----
component IOBUF_LVDS
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVDS : component is "PRIMITIVE";

----- component IOBUF_LVPECL -----
component IOBUF_LVPECL
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVPECL : component is "PRIMITIVE";

----- component IOBUF_LVTTL -----
component IOBUF_LVTTL
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_12 -----
component IOBUF_LVTTL_F_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_12 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_16 -----
component IOBUF_LVTTL_F_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_16 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_2 -----
component IOBUF_LVTTL_F_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_2 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_24 -----
component IOBUF_LVTTL_F_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_24 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_4 -----
component IOBUF_LVTTL_F_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_4 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_6 -----
component IOBUF_LVTTL_F_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_6 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_F_8 -----
component IOBUF_LVTTL_F_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_F_8 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_12 -----
component IOBUF_LVTTL_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_12 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_16 -----
component IOBUF_LVTTL_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_16 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_2 -----
component IOBUF_LVTTL_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_2 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_24 -----
component IOBUF_LVTTL_S_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_24 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_4 -----
component IOBUF_LVTTL_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_4 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_6 -----
component IOBUF_LVTTL_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_6 : component is "PRIMITIVE";

----- component IOBUF_LVTTL_S_8 -----
component IOBUF_LVTTL_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_LVTTL_S_8 : component is "PRIMITIVE";

----- component IOBUF_PCI33_3 -----
component IOBUF_PCI33_3
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_PCI33_3 : component is "PRIMITIVE";

----- component IOBUF_PCI33_5 -----
component IOBUF_PCI33_5
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_PCI33_5 : component is "PRIMITIVE";

----- component IOBUF_PCI66_3 -----
component IOBUF_PCI66_3
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_PCI66_3 : component is "PRIMITIVE";

----- component IOBUF_PCIX -----
component IOBUF_PCIX
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_PCIX : component is "PRIMITIVE";

----- component IOBUF_PCIX66_3 -----
component IOBUF_PCIX66_3
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_PCIX66_3 : component is "PRIMITIVE";

----- component IOBUF_SSTL18_I -----
component IOBUF_SSTL18_I
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL18_I : component is "PRIMITIVE";

----- component IOBUF_SSTL18_II -----
component IOBUF_SSTL18_II
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL18_II : component is "PRIMITIVE";

----- component IOBUF_SSTL18_II_DCI -----
component IOBUF_SSTL18_II_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL18_II_DCI : component is "PRIMITIVE";

----- component IOBUF_SSTL2_I -----
component IOBUF_SSTL2_I
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL2_I : component is "PRIMITIVE";

----- component IOBUF_SSTL2_II -----
component IOBUF_SSTL2_II
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL2_II : component is "PRIMITIVE";

----- component IOBUF_SSTL2_II_DCI -----
component IOBUF_SSTL2_II_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL2_II_DCI : component is "PRIMITIVE";

----- component IOBUF_SSTL3_I -----
component IOBUF_SSTL3_I
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL3_I : component is "PRIMITIVE";

----- component IOBUF_SSTL3_II -----
component IOBUF_SSTL3_II
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL3_II : component is "PRIMITIVE";

----- component IOBUF_SSTL3_II_DCI -----
component IOBUF_SSTL3_II_DCI
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_SSTL3_II_DCI : component is "PRIMITIVE";

----- component IOBUF_S_12 -----
component IOBUF_S_12
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_12 : component is "PRIMITIVE";

----- component IOBUF_S_16 -----
component IOBUF_S_16
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_16 : component is "PRIMITIVE";

----- component IOBUF_S_2 -----
component IOBUF_S_2
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_2 : component is "PRIMITIVE";

----- component IOBUF_S_24 -----
component IOBUF_S_24
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_24 : component is "PRIMITIVE";

----- component IOBUF_S_4 -----
component IOBUF_S_4
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_4 : component is "PRIMITIVE";

----- component IOBUF_S_6 -----
component IOBUF_S_6
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_6 : component is "PRIMITIVE";

----- component IOBUF_S_8 -----
component IOBUF_S_8
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_S_8 : component is "PRIMITIVE";

----- component IODELAY -----
component IODELAY
  generic (
     DELAY_SRC : string := "I";
     HIGH_PERFORMANCE_MODE : boolean := true;
     IDELAY_TYPE : string := "DEFAULT";
     IDELAY_VALUE : integer := 0;
     ODELAY_VALUE : integer := 0;
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IODELAY : component is "PRIMITIVE";

----- component IODELAY2 -----
component IODELAY2
  generic (
     COUNTER_WRAPAROUND : string := "WRAPAROUND";
     DATA_RATE : string := "SDR";
     DELAY_SRC : string := "IO";
     IDELAY2_VALUE : integer := 0;
     IDELAY_MODE : string := "NORMAL";
     IDELAY_TYPE : string := "DEFAULT";
     IDELAY_VALUE : integer := 0;
     ODELAY_VALUE : integer := 0;
     SERDES_MODE : string := "NONE";
     SIM_TAPDELAY_VALUE : integer := 75
  );
  port (
     BUSY : out std_ulogic;
     DATAOUT : out std_ulogic;
     DATAOUT2 : out std_ulogic;
     DOUT : out std_ulogic;
     TOUT : out std_ulogic;
     CAL : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     IOCLK0 : in std_ulogic;
     IOCLK1 : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IODELAY2 : component is "PRIMITIVE";

----- component IODELAYE1 -----
component IODELAYE1
  generic (
     CINVCTRL_SEL : boolean := FALSE;
     DELAY_SRC : string := "I";
     HIGH_PERFORMANCE_MODE : boolean := FALSE;
     IDELAY_TYPE : string := "DEFAULT";
     IDELAY_VALUE : integer := 0;
     ODELAY_TYPE : string := "FIXED";
     ODELAY_VALUE : integer := 0;
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CLKIN : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IODELAYE1 : component is "PRIMITIVE";

----- component KEY_CLEAR -----
component KEY_CLEAR
  port (
     KEYCLEARB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  KEY_CLEAR : component is "PRIMITIVE";

----- component LD -----
component LD
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LD : component is "PRIMITIVE";

----- component LDC -----
component LDC
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDC : component is "PRIMITIVE";

----- component LDCE_1 -----
component LDCE_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCE_1 : component is "PRIMITIVE";

----- component LDCP -----
component LDCP
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_G_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCP : component is "PRIMITIVE";

----- component LDCPE -----
component LDCPE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_GE_INVERTED : bit := '0';
     IS_G_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCPE : component is "PRIMITIVE";

----- component LDCPE_1 -----
component LDCPE_1
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_GE_INVERTED : bit := '0';
     IS_G_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCPE_1 : component is "PRIMITIVE";

----- component LDCP_1 -----
component LDCP_1
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_G_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCP_1 : component is "PRIMITIVE";

----- component LDC_1 -----
component LDC_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDC_1 : component is "PRIMITIVE";

----- component LDE -----
component LDE
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDE : component is "PRIMITIVE";

----- component LDE_1 -----
component LDE_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDE_1 : component is "PRIMITIVE";

----- component LDP -----
component LDP
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDP : component is "PRIMITIVE";

----- component LDPE_1 -----
component LDPE_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDPE_1 : component is "PRIMITIVE";

----- component LDP_1 -----
component LDP_1
  generic (
     INIT : bit := '1'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDP_1 : component is "PRIMITIVE";

----- component LD_1 -----
component LD_1
  generic (
     INIT : bit := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LD_1 : component is "PRIMITIVE";

----- component LUT1_D -----
component LUT1_D
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT1_D : component is "PRIMITIVE";

----- component LUT1_L -----
component LUT1_L
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT1_L : component is "PRIMITIVE";

----- component LUT2_D -----
component LUT2_D
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT2_D : component is "PRIMITIVE";

----- component LUT2_L -----
component LUT2_L
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT2_L : component is "PRIMITIVE";

----- component LUT3_D -----
component LUT3_D
  generic (
     INIT : bit_vector := X"00"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT3_D : component is "PRIMITIVE";

----- component LUT3_L -----
component LUT3_L
  generic (
     INIT : bit_vector := X"00"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT3_L : component is "PRIMITIVE";

----- component LUT4_D -----
component LUT4_D
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT4_D : component is "PRIMITIVE";

----- component LUT4_L -----
component LUT4_L
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT4_L : component is "PRIMITIVE";

----- component LUT5_D -----
component LUT5_D
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT5_D : component is "PRIMITIVE";

----- component LUT5_L -----
component LUT5_L
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT5_L : component is "PRIMITIVE";

----- component LUT6_D -----
component LUT6_D
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6_D : component is "PRIMITIVE";

----- component LUT6_L -----
component LUT6_L
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6_L : component is "PRIMITIVE";

----- component MMCM_ADV -----
component MMCM_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : boolean := FALSE;
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : boolean := FALSE;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : boolean := FALSE;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : boolean := FALSE;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : boolean := FALSE;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : boolean := FALSE;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : boolean := FALSE;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : boolean := FALSE;
     CLOCK_HOLD : boolean := FALSE;
     COMPENSATION : string := "ZHOLD";
     DIVCLK_DIVIDE : integer := 1;
     IS_PSINCDEC_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.0;
     REF_JITTER2 : real := 0.0;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic := '0';
     CLKFBOUTB : out std_ulogic := '0';
     CLKFBSTOPPED : out std_ulogic := '0';
     CLKINSTOPPED : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT0B : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT1B : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT2B : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT3B : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     CLKOUT6 : out std_ulogic := '0';
     DO : out std_logic_vector (15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCM_ADV : component is "PRIMITIVE";

----- component MMCM_BASE -----
component MMCM_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLOCK_HOLD : boolean := FALSE;
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCM_BASE : component is "PRIMITIVE";

----- component MULT18X18 -----
component MULT18X18
  port (
     P : out std_logic_vector (35 downto 0);
     A : in std_logic_vector (17 downto 0);
     B : in std_logic_vector (17 downto 0)
  );
end component;
attribute BOX_TYPE of
  MULT18X18 : component is "PRIMITIVE";

----- component MULT18X18S -----
component MULT18X18S
  port (
     P : out std_logic_vector (35 downto 0);
     A : in std_logic_vector (17 downto 0);
     B : in std_logic_vector (17 downto 0);
     C : in std_ulogic;
     CE : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MULT18X18S : component is "PRIMITIVE";

----- component MULT18X18SIO -----
component MULT18X18SIO
  generic (
     AREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     PREG : integer := 1
  );
  port (
     BCOUT : out std_logic_vector (17 downto 0);
     P : out std_logic_vector (35 downto 0);
     A : in std_logic_vector (17 downto 0);
     B : in std_logic_vector (17 downto 0);
     BCIN : in std_logic_vector (17 downto 0);
     CEA : in std_ulogic;
     CEB : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MULT18X18SIO : component is "PRIMITIVE";

----- component MULT_AND -----
component MULT_AND
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MULT_AND : component is "PRIMITIVE";

----- component MUXCY_D -----
component MUXCY_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     CI : in std_ulogic;
     DI : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXCY_D : component is "PRIMITIVE";

----- component MUXCY_L -----
component MUXCY_L
  port (
     LO : out std_ulogic;
     CI : in std_ulogic;
     DI : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXCY_L : component is "PRIMITIVE";

----- component MUXF5 -----
component MUXF5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF5 : component is "PRIMITIVE";

----- component MUXF5_D -----
component MUXF5_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF5_D : component is "PRIMITIVE";

----- component MUXF5_L -----
component MUXF5_L
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF5_L : component is "PRIMITIVE";

----- component MUXF6 -----
component MUXF6
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF6 : component is "PRIMITIVE";

----- component MUXF6_D -----
component MUXF6_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF6_D : component is "PRIMITIVE";

----- component MUXF6_L -----
component MUXF6_L
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF6_L : component is "PRIMITIVE";

----- component MUXF7_D -----
component MUXF7_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF7_D : component is "PRIMITIVE";

----- component MUXF7_L -----
component MUXF7_L
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF7_L : component is "PRIMITIVE";

----- component MUXF8_D -----
component MUXF8_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF8_D : component is "PRIMITIVE";

----- component MUXF8_L -----
component MUXF8_L
  port (
     LO : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF8_L : component is "PRIMITIVE";

----- component NAND2 -----
component NAND2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND2 : component is "PRIMITIVE";

----- component NAND2B1 -----
component NAND2B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND2B1 : component is "PRIMITIVE";

----- component NAND2B2 -----
component NAND2B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND2B2 : component is "PRIMITIVE";

----- component NAND3 -----
component NAND3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND3 : component is "PRIMITIVE";

----- component NAND3B1 -----
component NAND3B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND3B1 : component is "PRIMITIVE";

----- component NAND3B2 -----
component NAND3B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND3B2 : component is "PRIMITIVE";

----- component NAND3B3 -----
component NAND3B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND3B3 : component is "PRIMITIVE";

----- component NAND4 -----
component NAND4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND4 : component is "PRIMITIVE";

----- component NAND4B1 -----
component NAND4B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND4B1 : component is "PRIMITIVE";

----- component NAND4B2 -----
component NAND4B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND4B2 : component is "PRIMITIVE";

----- component NAND4B3 -----
component NAND4B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND4B3 : component is "PRIMITIVE";

----- component NAND4B4 -----
component NAND4B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND4B4 : component is "PRIMITIVE";

----- component NAND5 -----
component NAND5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5 : component is "PRIMITIVE";

----- component NAND5B1 -----
component NAND5B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5B1 : component is "PRIMITIVE";

----- component NAND5B2 -----
component NAND5B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5B2 : component is "PRIMITIVE";

----- component NAND5B3 -----
component NAND5B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5B3 : component is "PRIMITIVE";

----- component NAND5B4 -----
component NAND5B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5B4 : component is "PRIMITIVE";

----- component NAND5B5 -----
component NAND5B5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NAND5B5 : component is "PRIMITIVE";

----- component NOR2 -----
component NOR2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR2 : component is "PRIMITIVE";

----- component NOR2B1 -----
component NOR2B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR2B1 : component is "PRIMITIVE";

----- component NOR2B2 -----
component NOR2B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR2B2 : component is "PRIMITIVE";

----- component NOR3 -----
component NOR3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR3 : component is "PRIMITIVE";

----- component NOR3B1 -----
component NOR3B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR3B1 : component is "PRIMITIVE";

----- component NOR3B2 -----
component NOR3B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR3B2 : component is "PRIMITIVE";

----- component NOR3B3 -----
component NOR3B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR3B3 : component is "PRIMITIVE";

----- component NOR4 -----
component NOR4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR4 : component is "PRIMITIVE";

----- component NOR4B1 -----
component NOR4B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR4B1 : component is "PRIMITIVE";

----- component NOR4B2 -----
component NOR4B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR4B2 : component is "PRIMITIVE";

----- component NOR4B3 -----
component NOR4B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR4B3 : component is "PRIMITIVE";

----- component NOR4B4 -----
component NOR4B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR4B4 : component is "PRIMITIVE";

----- component NOR5 -----
component NOR5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5 : component is "PRIMITIVE";

----- component NOR5B1 -----
component NOR5B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5B1 : component is "PRIMITIVE";

----- component NOR5B2 -----
component NOR5B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5B2 : component is "PRIMITIVE";

----- component NOR5B3 -----
component NOR5B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5B3 : component is "PRIMITIVE";

----- component NOR5B4 -----
component NOR5B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5B4 : component is "PRIMITIVE";

----- component NOR5B5 -----
component NOR5B5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOR5B5 : component is "PRIMITIVE";

----- component OBUFDS_BLVDS_25 -----
component OBUFDS_BLVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_BLVDS_25 : component is "PRIMITIVE";

----- component OBUFDS_LDT_25 -----
component OBUFDS_LDT_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LDT_25 : component is "PRIMITIVE";

----- component OBUFDS_LVDSEXT_25 -----
component OBUFDS_LVDSEXT_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVDSEXT_25 : component is "PRIMITIVE";

----- component OBUFDS_LVDSEXT_33 -----
component OBUFDS_LVDSEXT_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVDSEXT_33 : component is "PRIMITIVE";

----- component OBUFDS_LVDS_25 -----
component OBUFDS_LVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVDS_25 : component is "PRIMITIVE";

----- component OBUFDS_LVDS_33 -----
component OBUFDS_LVDS_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVDS_33 : component is "PRIMITIVE";

----- component OBUFDS_LVPECL_25 -----
component OBUFDS_LVPECL_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVPECL_25 : component is "PRIMITIVE";

----- component OBUFDS_LVPECL_33 -----
component OBUFDS_LVPECL_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_LVPECL_33 : component is "PRIMITIVE";

----- component OBUFDS_ULVDS_25 -----
component OBUFDS_ULVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_ULVDS_25 : component is "PRIMITIVE";

----- component OBUFTDS_BLVDS_25 -----
component OBUFTDS_BLVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_BLVDS_25 : component is "PRIMITIVE";

----- component OBUFTDS_LDT_25 -----
component OBUFTDS_LDT_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LDT_25 : component is "PRIMITIVE";

----- component OBUFTDS_LVDSEXT_25 -----
component OBUFTDS_LVDSEXT_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVDSEXT_25 : component is "PRIMITIVE";

----- component OBUFTDS_LVDSEXT_33 -----
component OBUFTDS_LVDSEXT_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVDSEXT_33 : component is "PRIMITIVE";

----- component OBUFTDS_LVDS_25 -----
component OBUFTDS_LVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVDS_25 : component is "PRIMITIVE";

----- component OBUFTDS_LVDS_33 -----
component OBUFTDS_LVDS_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVDS_33 : component is "PRIMITIVE";

----- component OBUFTDS_LVPECL_25 -----
component OBUFTDS_LVPECL_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVPECL_25 : component is "PRIMITIVE";

----- component OBUFTDS_LVPECL_33 -----
component OBUFTDS_LVPECL_33
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_LVPECL_33 : component is "PRIMITIVE";

----- component OBUFTDS_ULVDS_25 -----
component OBUFTDS_ULVDS_25
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_ULVDS_25 : component is "PRIMITIVE";

----- component OBUFT_AGP -----
component OBUFT_AGP
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_AGP : component is "PRIMITIVE";

----- component OBUFT_CTT -----
component OBUFT_CTT
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_CTT : component is "PRIMITIVE";

----- component OBUFT_F_12 -----
component OBUFT_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_12 : component is "PRIMITIVE";

----- component OBUFT_F_16 -----
component OBUFT_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_16 : component is "PRIMITIVE";

----- component OBUFT_F_2 -----
component OBUFT_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_2 : component is "PRIMITIVE";

----- component OBUFT_F_24 -----
component OBUFT_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_24 : component is "PRIMITIVE";

----- component OBUFT_F_4 -----
component OBUFT_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_4 : component is "PRIMITIVE";

----- component OBUFT_F_6 -----
component OBUFT_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_6 : component is "PRIMITIVE";

----- component OBUFT_F_8 -----
component OBUFT_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_F_8 : component is "PRIMITIVE";

----- component OBUFT_GTL -----
component OBUFT_GTL
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_GTL : component is "PRIMITIVE";

----- component OBUFT_GTLP -----
component OBUFT_GTLP
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_GTLP : component is "PRIMITIVE";

----- component OBUFT_GTLP_DCI -----
component OBUFT_GTLP_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_GTLP_DCI : component is "PRIMITIVE";

----- component OBUFT_GTL_DCI -----
component OBUFT_GTL_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_GTL_DCI : component is "PRIMITIVE";

----- component OBUFT_HSTL_I -----
component OBUFT_HSTL_I
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_I : component is "PRIMITIVE";

----- component OBUFT_HSTL_II -----
component OBUFT_HSTL_II
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_II : component is "PRIMITIVE";

----- component OBUFT_HSTL_III -----
component OBUFT_HSTL_III
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_III : component is "PRIMITIVE";

----- component OBUFT_HSTL_III_18 -----
component OBUFT_HSTL_III_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_III_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_III_DCI -----
component OBUFT_HSTL_III_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_III_DCI : component is "PRIMITIVE";

----- component OBUFT_HSTL_III_DCI_18 -----
component OBUFT_HSTL_III_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_III_DCI_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_II_18 -----
component OBUFT_HSTL_II_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_II_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_II_DCI -----
component OBUFT_HSTL_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_II_DCI : component is "PRIMITIVE";

----- component OBUFT_HSTL_II_DCI_18 -----
component OBUFT_HSTL_II_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_II_DCI_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_IV -----
component OBUFT_HSTL_IV
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_IV : component is "PRIMITIVE";

----- component OBUFT_HSTL_IV_18 -----
component OBUFT_HSTL_IV_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_IV_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_IV_DCI -----
component OBUFT_HSTL_IV_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_IV_DCI : component is "PRIMITIVE";

----- component OBUFT_HSTL_IV_DCI_18 -----
component OBUFT_HSTL_IV_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_IV_DCI_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_I_18 -----
component OBUFT_HSTL_I_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_I_18 : component is "PRIMITIVE";

----- component OBUFT_HSTL_I_DCI -----
component OBUFT_HSTL_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_I_DCI : component is "PRIMITIVE";

----- component OBUFT_HSTL_I_DCI_18 -----
component OBUFT_HSTL_I_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_HSTL_I_DCI_18 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12 -----
component OBUFT_LVCMOS12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_F_2 -----
component OBUFT_LVCMOS12_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_F_4 -----
component OBUFT_LVCMOS12_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_F_6 -----
component OBUFT_LVCMOS12_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_F_8 -----
component OBUFT_LVCMOS12_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_S_2 -----
component OBUFT_LVCMOS12_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_S_4 -----
component OBUFT_LVCMOS12_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_S_6 -----
component OBUFT_LVCMOS12_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS12_S_8 -----
component OBUFT_LVCMOS12_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS12_S_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15 -----
component OBUFT_LVCMOS15
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_12 -----
component OBUFT_LVCMOS15_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_16 -----
component OBUFT_LVCMOS15_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_2 -----
component OBUFT_LVCMOS15_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_4 -----
component OBUFT_LVCMOS15_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_6 -----
component OBUFT_LVCMOS15_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_F_8 -----
component OBUFT_LVCMOS15_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_12 -----
component OBUFT_LVCMOS15_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_16 -----
component OBUFT_LVCMOS15_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_2 -----
component OBUFT_LVCMOS15_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_4 -----
component OBUFT_LVCMOS15_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_6 -----
component OBUFT_LVCMOS15_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS15_S_8 -----
component OBUFT_LVCMOS15_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS15_S_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18 -----
component OBUFT_LVCMOS18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_12 -----
component OBUFT_LVCMOS18_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_16 -----
component OBUFT_LVCMOS18_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_2 -----
component OBUFT_LVCMOS18_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_4 -----
component OBUFT_LVCMOS18_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_6 -----
component OBUFT_LVCMOS18_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_F_8 -----
component OBUFT_LVCMOS18_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_12 -----
component OBUFT_LVCMOS18_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_16 -----
component OBUFT_LVCMOS18_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_2 -----
component OBUFT_LVCMOS18_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_4 -----
component OBUFT_LVCMOS18_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_6 -----
component OBUFT_LVCMOS18_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS18_S_8 -----
component OBUFT_LVCMOS18_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS18_S_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS2 -----
component OBUFT_LVCMOS2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25 -----
component OBUFT_LVCMOS25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_12 -----
component OBUFT_LVCMOS25_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_16 -----
component OBUFT_LVCMOS25_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_2 -----
component OBUFT_LVCMOS25_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_24 -----
component OBUFT_LVCMOS25_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_24 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_4 -----
component OBUFT_LVCMOS25_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_6 -----
component OBUFT_LVCMOS25_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_F_8 -----
component OBUFT_LVCMOS25_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_12 -----
component OBUFT_LVCMOS25_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_16 -----
component OBUFT_LVCMOS25_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_2 -----
component OBUFT_LVCMOS25_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_24 -----
component OBUFT_LVCMOS25_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_24 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_4 -----
component OBUFT_LVCMOS25_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_6 -----
component OBUFT_LVCMOS25_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS25_S_8 -----
component OBUFT_LVCMOS25_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS25_S_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33 -----
component OBUFT_LVCMOS33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_12 -----
component OBUFT_LVCMOS33_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_16 -----
component OBUFT_LVCMOS33_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_2 -----
component OBUFT_LVCMOS33_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_24 -----
component OBUFT_LVCMOS33_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_24 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_4 -----
component OBUFT_LVCMOS33_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_6 -----
component OBUFT_LVCMOS33_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_F_8 -----
component OBUFT_LVCMOS33_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_12 -----
component OBUFT_LVCMOS33_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_12 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_16 -----
component OBUFT_LVCMOS33_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_16 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_2 -----
component OBUFT_LVCMOS33_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_24 -----
component OBUFT_LVCMOS33_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_24 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_4 -----
component OBUFT_LVCMOS33_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_6 -----
component OBUFT_LVCMOS33_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVCMOS33_S_8 -----
component OBUFT_LVCMOS33_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVCMOS33_S_8 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_15 -----
component OBUFT_LVDCI_15
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_15 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_18 -----
component OBUFT_LVDCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_18 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_25 -----
component OBUFT_LVDCI_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_25 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_33 -----
component OBUFT_LVDCI_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_33 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_DV2_15 -----
component OBUFT_LVDCI_DV2_15
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_DV2_15 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_DV2_18 -----
component OBUFT_LVDCI_DV2_18
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_DV2_18 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_DV2_25 -----
component OBUFT_LVDCI_DV2_25
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_DV2_25 : component is "PRIMITIVE";

----- component OBUFT_LVDCI_DV2_33 -----
component OBUFT_LVDCI_DV2_33
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDCI_DV2_33 : component is "PRIMITIVE";

----- component OBUFT_LVDS -----
component OBUFT_LVDS
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVDS : component is "PRIMITIVE";

----- component OBUFT_LVPECL -----
component OBUFT_LVPECL
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVPECL : component is "PRIMITIVE";

----- component OBUFT_LVTTL -----
component OBUFT_LVTTL
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_12 -----
component OBUFT_LVTTL_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_12 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_16 -----
component OBUFT_LVTTL_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_16 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_2 -----
component OBUFT_LVTTL_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_2 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_24 -----
component OBUFT_LVTTL_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_24 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_4 -----
component OBUFT_LVTTL_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_4 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_6 -----
component OBUFT_LVTTL_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_6 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_F_8 -----
component OBUFT_LVTTL_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_F_8 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_12 -----
component OBUFT_LVTTL_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_12 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_16 -----
component OBUFT_LVTTL_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_16 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_2 -----
component OBUFT_LVTTL_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_2 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_24 -----
component OBUFT_LVTTL_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_24 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_4 -----
component OBUFT_LVTTL_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_4 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_6 -----
component OBUFT_LVTTL_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_6 : component is "PRIMITIVE";

----- component OBUFT_LVTTL_S_8 -----
component OBUFT_LVTTL_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_LVTTL_S_8 : component is "PRIMITIVE";

----- component OBUFT_PCI33_3 -----
component OBUFT_PCI33_3
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_PCI33_3 : component is "PRIMITIVE";

----- component OBUFT_PCI33_5 -----
component OBUFT_PCI33_5
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_PCI33_5 : component is "PRIMITIVE";

----- component OBUFT_PCI66_3 -----
component OBUFT_PCI66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_PCI66_3 : component is "PRIMITIVE";

----- component OBUFT_PCIX -----
component OBUFT_PCIX
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_PCIX : component is "PRIMITIVE";

----- component OBUFT_PCIX66_3 -----
component OBUFT_PCIX66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_PCIX66_3 : component is "PRIMITIVE";

----- component OBUFT_SSTL18_I -----
component OBUFT_SSTL18_I
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL18_I : component is "PRIMITIVE";

----- component OBUFT_SSTL18_II -----
component OBUFT_SSTL18_II
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL18_II : component is "PRIMITIVE";

----- component OBUFT_SSTL18_II_DCI -----
component OBUFT_SSTL18_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL18_II_DCI : component is "PRIMITIVE";

----- component OBUFT_SSTL18_I_DCI -----
component OBUFT_SSTL18_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL18_I_DCI : component is "PRIMITIVE";

----- component OBUFT_SSTL2_I -----
component OBUFT_SSTL2_I
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL2_I : component is "PRIMITIVE";

----- component OBUFT_SSTL2_II -----
component OBUFT_SSTL2_II
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL2_II : component is "PRIMITIVE";

----- component OBUFT_SSTL2_II_DCI -----
component OBUFT_SSTL2_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL2_II_DCI : component is "PRIMITIVE";

----- component OBUFT_SSTL2_I_DCI -----
component OBUFT_SSTL2_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL2_I_DCI : component is "PRIMITIVE";

----- component OBUFT_SSTL3_I -----
component OBUFT_SSTL3_I
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL3_I : component is "PRIMITIVE";

----- component OBUFT_SSTL3_II -----
component OBUFT_SSTL3_II
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL3_II : component is "PRIMITIVE";

----- component OBUFT_SSTL3_II_DCI -----
component OBUFT_SSTL3_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL3_II_DCI : component is "PRIMITIVE";

----- component OBUFT_SSTL3_I_DCI -----
component OBUFT_SSTL3_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_SSTL3_I_DCI : component is "PRIMITIVE";

----- component OBUFT_S_12 -----
component OBUFT_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_12 : component is "PRIMITIVE";

----- component OBUFT_S_16 -----
component OBUFT_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_16 : component is "PRIMITIVE";

----- component OBUFT_S_2 -----
component OBUFT_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_2 : component is "PRIMITIVE";

----- component OBUFT_S_24 -----
component OBUFT_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_24 : component is "PRIMITIVE";

----- component OBUFT_S_4 -----
component OBUFT_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_4 : component is "PRIMITIVE";

----- component OBUFT_S_6 -----
component OBUFT_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_6 : component is "PRIMITIVE";

----- component OBUFT_S_8 -----
component OBUFT_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_S_8 : component is "PRIMITIVE";

----- component OBUF_AGP -----
component OBUF_AGP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_AGP : component is "PRIMITIVE";

----- component OBUF_CTT -----
component OBUF_CTT
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_CTT : component is "PRIMITIVE";

----- component OBUF_F_12 -----
component OBUF_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_12 : component is "PRIMITIVE";

----- component OBUF_F_16 -----
component OBUF_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_16 : component is "PRIMITIVE";

----- component OBUF_F_2 -----
component OBUF_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_2 : component is "PRIMITIVE";

----- component OBUF_F_24 -----
component OBUF_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_24 : component is "PRIMITIVE";

----- component OBUF_F_4 -----
component OBUF_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_4 : component is "PRIMITIVE";

----- component OBUF_F_6 -----
component OBUF_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_6 : component is "PRIMITIVE";

----- component OBUF_F_8 -----
component OBUF_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_F_8 : component is "PRIMITIVE";

----- component OBUF_GTL -----
component OBUF_GTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_GTL : component is "PRIMITIVE";

----- component OBUF_GTLP -----
component OBUF_GTLP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_GTLP : component is "PRIMITIVE";

----- component OBUF_GTLP_DCI -----
component OBUF_GTLP_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_GTLP_DCI : component is "PRIMITIVE";

----- component OBUF_GTL_DCI -----
component OBUF_GTL_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_GTL_DCI : component is "PRIMITIVE";

----- component OBUF_HSTL_I -----
component OBUF_HSTL_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_I : component is "PRIMITIVE";

----- component OBUF_HSTL_II -----
component OBUF_HSTL_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_II : component is "PRIMITIVE";

----- component OBUF_HSTL_III -----
component OBUF_HSTL_III
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_III : component is "PRIMITIVE";

----- component OBUF_HSTL_III_18 -----
component OBUF_HSTL_III_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_III_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_III_DCI -----
component OBUF_HSTL_III_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_III_DCI : component is "PRIMITIVE";

----- component OBUF_HSTL_III_DCI_18 -----
component OBUF_HSTL_III_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_III_DCI_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_II_18 -----
component OBUF_HSTL_II_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_II_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_II_DCI -----
component OBUF_HSTL_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_II_DCI : component is "PRIMITIVE";

----- component OBUF_HSTL_II_DCI_18 -----
component OBUF_HSTL_II_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_II_DCI_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_IV -----
component OBUF_HSTL_IV
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_IV : component is "PRIMITIVE";

----- component OBUF_HSTL_IV_18 -----
component OBUF_HSTL_IV_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_IV_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_IV_DCI -----
component OBUF_HSTL_IV_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_IV_DCI : component is "PRIMITIVE";

----- component OBUF_HSTL_IV_DCI_18 -----
component OBUF_HSTL_IV_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_IV_DCI_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_I_18 -----
component OBUF_HSTL_I_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_I_18 : component is "PRIMITIVE";

----- component OBUF_HSTL_I_DCI -----
component OBUF_HSTL_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_I_DCI : component is "PRIMITIVE";

----- component OBUF_HSTL_I_DCI_18 -----
component OBUF_HSTL_I_DCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_HSTL_I_DCI_18 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12 -----
component OBUF_LVCMOS12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_F_2 -----
component OBUF_LVCMOS12_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_F_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_F_4 -----
component OBUF_LVCMOS12_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_F_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_F_6 -----
component OBUF_LVCMOS12_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_F_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_F_8 -----
component OBUF_LVCMOS12_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_F_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_S_2 -----
component OBUF_LVCMOS12_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_S_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_S_4 -----
component OBUF_LVCMOS12_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_S_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_S_6 -----
component OBUF_LVCMOS12_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_S_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS12_S_8 -----
component OBUF_LVCMOS12_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS12_S_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15 -----
component OBUF_LVCMOS15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_12 -----
component OBUF_LVCMOS15_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_16 -----
component OBUF_LVCMOS15_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_2 -----
component OBUF_LVCMOS15_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_4 -----
component OBUF_LVCMOS15_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_6 -----
component OBUF_LVCMOS15_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_F_8 -----
component OBUF_LVCMOS15_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_F_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_12 -----
component OBUF_LVCMOS15_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_16 -----
component OBUF_LVCMOS15_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_2 -----
component OBUF_LVCMOS15_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_4 -----
component OBUF_LVCMOS15_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_6 -----
component OBUF_LVCMOS15_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS15_S_8 -----
component OBUF_LVCMOS15_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS15_S_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18 -----
component OBUF_LVCMOS18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_12 -----
component OBUF_LVCMOS18_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_16 -----
component OBUF_LVCMOS18_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_2 -----
component OBUF_LVCMOS18_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_4 -----
component OBUF_LVCMOS18_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_6 -----
component OBUF_LVCMOS18_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_F_8 -----
component OBUF_LVCMOS18_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_F_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_12 -----
component OBUF_LVCMOS18_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_16 -----
component OBUF_LVCMOS18_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_2 -----
component OBUF_LVCMOS18_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_4 -----
component OBUF_LVCMOS18_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_6 -----
component OBUF_LVCMOS18_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS18_S_8 -----
component OBUF_LVCMOS18_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS18_S_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS2 -----
component OBUF_LVCMOS2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25 -----
component OBUF_LVCMOS25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_12 -----
component OBUF_LVCMOS25_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_16 -----
component OBUF_LVCMOS25_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_2 -----
component OBUF_LVCMOS25_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_24 -----
component OBUF_LVCMOS25_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_24 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_4 -----
component OBUF_LVCMOS25_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_6 -----
component OBUF_LVCMOS25_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_F_8 -----
component OBUF_LVCMOS25_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_F_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_12 -----
component OBUF_LVCMOS25_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_16 -----
component OBUF_LVCMOS25_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_2 -----
component OBUF_LVCMOS25_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_24 -----
component OBUF_LVCMOS25_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_24 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_4 -----
component OBUF_LVCMOS25_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_6 -----
component OBUF_LVCMOS25_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS25_S_8 -----
component OBUF_LVCMOS25_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS25_S_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33 -----
component OBUF_LVCMOS33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_12 -----
component OBUF_LVCMOS33_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_16 -----
component OBUF_LVCMOS33_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_2 -----
component OBUF_LVCMOS33_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_24 -----
component OBUF_LVCMOS33_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_24 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_4 -----
component OBUF_LVCMOS33_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_6 -----
component OBUF_LVCMOS33_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_F_8 -----
component OBUF_LVCMOS33_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_F_8 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_12 -----
component OBUF_LVCMOS33_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_12 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_16 -----
component OBUF_LVCMOS33_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_16 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_2 -----
component OBUF_LVCMOS33_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_2 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_24 -----
component OBUF_LVCMOS33_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_24 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_4 -----
component OBUF_LVCMOS33_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_4 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_6 -----
component OBUF_LVCMOS33_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_6 : component is "PRIMITIVE";

----- component OBUF_LVCMOS33_S_8 -----
component OBUF_LVCMOS33_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVCMOS33_S_8 : component is "PRIMITIVE";

----- component OBUF_LVDCI_15 -----
component OBUF_LVDCI_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_15 : component is "PRIMITIVE";

----- component OBUF_LVDCI_18 -----
component OBUF_LVDCI_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_18 : component is "PRIMITIVE";

----- component OBUF_LVDCI_25 -----
component OBUF_LVDCI_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_25 : component is "PRIMITIVE";

----- component OBUF_LVDCI_33 -----
component OBUF_LVDCI_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_33 : component is "PRIMITIVE";

----- component OBUF_LVDCI_DV2_15 -----
component OBUF_LVDCI_DV2_15
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_DV2_15 : component is "PRIMITIVE";

----- component OBUF_LVDCI_DV2_18 -----
component OBUF_LVDCI_DV2_18
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_DV2_18 : component is "PRIMITIVE";

----- component OBUF_LVDCI_DV2_25 -----
component OBUF_LVDCI_DV2_25
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_DV2_25 : component is "PRIMITIVE";

----- component OBUF_LVDCI_DV2_33 -----
component OBUF_LVDCI_DV2_33
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDCI_DV2_33 : component is "PRIMITIVE";

----- component OBUF_LVDS -----
component OBUF_LVDS
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVDS : component is "PRIMITIVE";

----- component OBUF_LVPECL -----
component OBUF_LVPECL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVPECL : component is "PRIMITIVE";

----- component OBUF_LVTTL -----
component OBUF_LVTTL
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_12 -----
component OBUF_LVTTL_F_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_12 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_16 -----
component OBUF_LVTTL_F_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_16 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_2 -----
component OBUF_LVTTL_F_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_2 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_24 -----
component OBUF_LVTTL_F_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_24 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_4 -----
component OBUF_LVTTL_F_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_4 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_6 -----
component OBUF_LVTTL_F_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_6 : component is "PRIMITIVE";

----- component OBUF_LVTTL_F_8 -----
component OBUF_LVTTL_F_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_F_8 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_12 -----
component OBUF_LVTTL_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_12 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_16 -----
component OBUF_LVTTL_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_16 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_2 -----
component OBUF_LVTTL_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_2 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_24 -----
component OBUF_LVTTL_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_24 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_4 -----
component OBUF_LVTTL_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_4 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_6 -----
component OBUF_LVTTL_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_6 : component is "PRIMITIVE";

----- component OBUF_LVTTL_S_8 -----
component OBUF_LVTTL_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_LVTTL_S_8 : component is "PRIMITIVE";

----- component OBUF_PCI33_3 -----
component OBUF_PCI33_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_PCI33_3 : component is "PRIMITIVE";

----- component OBUF_PCI33_5 -----
component OBUF_PCI33_5
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_PCI33_5 : component is "PRIMITIVE";

----- component OBUF_PCI66_3 -----
component OBUF_PCI66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_PCI66_3 : component is "PRIMITIVE";

----- component OBUF_PCIX -----
component OBUF_PCIX
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_PCIX : component is "PRIMITIVE";

----- component OBUF_PCIX66_3 -----
component OBUF_PCIX66_3
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_PCIX66_3 : component is "PRIMITIVE";

----- component OBUF_SSTL18_I -----
component OBUF_SSTL18_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL18_I : component is "PRIMITIVE";

----- component OBUF_SSTL18_II -----
component OBUF_SSTL18_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL18_II : component is "PRIMITIVE";

----- component OBUF_SSTL18_II_DCI -----
component OBUF_SSTL18_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL18_II_DCI : component is "PRIMITIVE";

----- component OBUF_SSTL18_I_DCI -----
component OBUF_SSTL18_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL18_I_DCI : component is "PRIMITIVE";

----- component OBUF_SSTL2_I -----
component OBUF_SSTL2_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL2_I : component is "PRIMITIVE";

----- component OBUF_SSTL2_II -----
component OBUF_SSTL2_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL2_II : component is "PRIMITIVE";

----- component OBUF_SSTL2_II_DCI -----
component OBUF_SSTL2_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL2_II_DCI : component is "PRIMITIVE";

----- component OBUF_SSTL2_I_DCI -----
component OBUF_SSTL2_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL2_I_DCI : component is "PRIMITIVE";

----- component OBUF_SSTL3_I -----
component OBUF_SSTL3_I
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL3_I : component is "PRIMITIVE";

----- component OBUF_SSTL3_II -----
component OBUF_SSTL3_II
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL3_II : component is "PRIMITIVE";

----- component OBUF_SSTL3_II_DCI -----
component OBUF_SSTL3_II_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL3_II_DCI : component is "PRIMITIVE";

----- component OBUF_SSTL3_I_DCI -----
component OBUF_SSTL3_I_DCI
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_SSTL3_I_DCI : component is "PRIMITIVE";

----- component OBUF_S_12 -----
component OBUF_S_12
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_12 : component is "PRIMITIVE";

----- component OBUF_S_16 -----
component OBUF_S_16
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_16 : component is "PRIMITIVE";

----- component OBUF_S_2 -----
component OBUF_S_2
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_2 : component is "PRIMITIVE";

----- component OBUF_S_24 -----
component OBUF_S_24
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_24 : component is "PRIMITIVE";

----- component OBUF_S_4 -----
component OBUF_S_4
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_4 : component is "PRIMITIVE";

----- component OBUF_S_6 -----
component OBUF_S_6
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_6 : component is "PRIMITIVE";

----- component OBUF_S_8 -----
component OBUF_S_8
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF_S_8 : component is "PRIMITIVE";

----- component ODDR2 -----
component ODDR2
  generic (
     DDR_ALIGNMENT : string := "NONE";
     INIT : bit := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q : out std_ulogic;
     C0 : in std_ulogic;
     C1 : in std_ulogic;
     CE : in std_ulogic := 'H';
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  ODDR2 : component is "PRIMITIVE";

----- component OR2 -----
component OR2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR2 : component is "PRIMITIVE";

----- component OR2B1 -----
component OR2B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR2B1 : component is "PRIMITIVE";

----- component OR2B2 -----
component OR2B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR2B2 : component is "PRIMITIVE";

----- component OR3 -----
component OR3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR3 : component is "PRIMITIVE";

----- component OR3B1 -----
component OR3B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR3B1 : component is "PRIMITIVE";

----- component OR3B2 -----
component OR3B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR3B2 : component is "PRIMITIVE";

----- component OR3B3 -----
component OR3B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR3B3 : component is "PRIMITIVE";

----- component OR4 -----
component OR4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR4 : component is "PRIMITIVE";

----- component OR4B1 -----
component OR4B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR4B1 : component is "PRIMITIVE";

----- component OR4B2 -----
component OR4B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR4B2 : component is "PRIMITIVE";

----- component OR4B3 -----
component OR4B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR4B3 : component is "PRIMITIVE";

----- component OR4B4 -----
component OR4B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR4B4 : component is "PRIMITIVE";

----- component OR5 -----
component OR5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5 : component is "PRIMITIVE";

----- component OR5B1 -----
component OR5B1
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5B1 : component is "PRIMITIVE";

----- component OR5B2 -----
component OR5B2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5B2 : component is "PRIMITIVE";

----- component OR5B3 -----
component OR5B3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5B3 : component is "PRIMITIVE";

----- component OR5B4 -----
component OR5B4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5B4 : component is "PRIMITIVE";

----- component OR5B5 -----
component OR5B5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR5B5 : component is "PRIMITIVE";

----- component PLL_ADV -----
component PLL_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_DESKEW_ADJUST : string := "NONE";
     CLKFBOUT_MULT : integer := 1;
     CLKFBOUT_PHASE : real := 0.0;
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DESKEW_ADJUST : string := "NONE";
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.5;
     CLKOUT0_PHASE : real := 0.0;
     CLKOUT1_DESKEW_ADJUST : string := "NONE";
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.5;
     CLKOUT1_PHASE : real := 0.0;
     CLKOUT2_DESKEW_ADJUST : string := "NONE";
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.5;
     CLKOUT2_PHASE : real := 0.0;
     CLKOUT3_DESKEW_ADJUST : string := "NONE";
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.5;
     CLKOUT3_PHASE : real := 0.0;
     CLKOUT4_DESKEW_ADJUST : string := "NONE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.5;
     CLKOUT4_PHASE : real := 0.0;
     CLKOUT5_DESKEW_ADJUST : string := "NONE";
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.5;
     CLKOUT5_PHASE : real := 0.0;
     CLK_FEEDBACK : string := "CLKFBOUT";
     COMPENSATION : string := "SYSTEM_SYNCHRONOUS";
     DIVCLK_DIVIDE : integer := 1;
     EN_REL : boolean := FALSE;
     PLL_PMCD_MODE : boolean := FALSE;
     REF_JITTER : real := 0.100;
     RESET_ON_LOSS_OF_LOCK : boolean := FALSE;
     RST_DEASSERT_CLK : string := "CLKIN1";
     SIM_DEVICE : string := "VIRTEX5"
  );
  port (
     CLKFBDCM : out std_ulogic := '0';
     CLKFBOUT : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     CLKOUTDCM0 : out std_ulogic := '0';
     CLKOUTDCM1 : out std_ulogic := '0';
     CLKOUTDCM2 : out std_ulogic := '0';
     CLKOUTDCM3 : out std_ulogic := '0';
     CLKOUTDCM4 : out std_ulogic := '0';
     CLKOUTDCM5 : out std_ulogic := '0';
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(4 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     REL : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLL_ADV : component is "PRIMITIVE";

----- component PLL_BASE -----
component PLL_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT : integer := 1;
     CLKFBOUT_PHASE : real := 0.0;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.5;
     CLKOUT0_PHASE : real := 0.0;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.5;
     CLKOUT1_PHASE : real := 0.0;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.5;
     CLKOUT2_PHASE : real := 0.0;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.5;
     CLKOUT3_PHASE : real := 0.0;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.5;
     CLKOUT4_PHASE : real := 0.0;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.5;
     CLKOUT5_PHASE : real := 0.0;
     CLK_FEEDBACK : string := "CLKFBOUT";
     COMPENSATION : string := "SYSTEM_SYNCHRONOUS";
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER : real := 0.100;
     RESET_ON_LOSS_OF_LOCK : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLL_BASE : component is "PRIMITIVE";

----- component RAM128X1S_1 -----
component RAM128X1S_1
  generic (
     INIT : bit_vector(127 downto 0) := X"00000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     A6 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM128X1S_1 : component is "PRIMITIVE";

----- component RAM16X1D -----
component RAM16X1D
  generic (
     INIT : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X1D : component is "PRIMITIVE";

----- component RAM16X1D_1 -----
component RAM16X1D_1
  generic (
     INIT : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X1D_1 : component is "PRIMITIVE";

----- component RAM16X1S -----
component RAM16X1S
  generic (
     INIT : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X1S : component is "PRIMITIVE";

----- component RAM16X1S_1 -----
component RAM16X1S_1
  generic (
     INIT : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X1S_1 : component is "PRIMITIVE";

----- component RAM16X2S -----
component RAM16X2S
  generic (
     INIT_00 : bit_vector(15 downto 0) := X"0000";
     INIT_01 : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O0 : out std_ulogic;
     O1 : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X2S : component is "PRIMITIVE";

----- component RAM16X4S -----
component RAM16X4S
  generic (
     INIT_00 : bit_vector(15 downto 0) := X"0000";
     INIT_01 : bit_vector(15 downto 0) := X"0000";
     INIT_02 : bit_vector(15 downto 0) := X"0000";
     INIT_03 : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O0 : out std_ulogic;
     O1 : out std_ulogic;
     O2 : out std_ulogic;
     O3 : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X4S : component is "PRIMITIVE";

----- component RAM16X8S -----
component RAM16X8S
  generic (
     INIT_00 : bit_vector(15 downto 0) := X"0000";
     INIT_01 : bit_vector(15 downto 0) := X"0000";
     INIT_02 : bit_vector(15 downto 0) := X"0000";
     INIT_03 : bit_vector(15 downto 0) := X"0000";
     INIT_04 : bit_vector(15 downto 0) := X"0000";
     INIT_05 : bit_vector(15 downto 0) := X"0000";
     INIT_06 : bit_vector(15 downto 0) := X"0000";
     INIT_07 : bit_vector(15 downto 0) := X"0000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_logic_vector ( 7 downto 0);
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     D : in std_logic_vector ( 7 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM16X8S : component is "PRIMITIVE";

----- component RAM32X1D_1 -----
component RAM32X1D_1
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1D_1 : component is "PRIMITIVE";

----- component RAM32X1S_1 -----
component RAM32X1S_1
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1S_1 : component is "PRIMITIVE";

----- component RAM32X2S -----
component RAM32X2S
  generic (
     INIT_00 : bit_vector(31 downto 0) := X"00000000";
     INIT_01 : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O0 : out std_ulogic;
     O1 : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X2S : component is "PRIMITIVE";

----- component RAM32X4S -----
component RAM32X4S
  generic (
     INIT_00 : bit_vector(31 downto 0) := X"00000000";
     INIT_01 : bit_vector(31 downto 0) := X"00000000";
     INIT_02 : bit_vector(31 downto 0) := X"00000000";
     INIT_03 : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O0 : out std_ulogic;
     O1 : out std_ulogic;
     O2 : out std_ulogic;
     O3 : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X4S : component is "PRIMITIVE";

----- component RAM32X8S -----
component RAM32X8S
  generic (
     INIT_00 : bit_vector(31 downto 0) := X"00000000";
     INIT_01 : bit_vector(31 downto 0) := X"00000000";
     INIT_02 : bit_vector(31 downto 0) := X"00000000";
     INIT_03 : bit_vector(31 downto 0) := X"00000000";
     INIT_04 : bit_vector(31 downto 0) := X"00000000";
     INIT_05 : bit_vector(31 downto 0) := X"00000000";
     INIT_06 : bit_vector(31 downto 0) := X"00000000";
     INIT_07 : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_logic_vector ( 7 downto 0);
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_logic_vector ( 7 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X8S : component is "PRIMITIVE";

----- component RAM64X1D_1 -----
component RAM64X1D_1
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     DPRA5 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1D_1 : component is "PRIMITIVE";

----- component RAM64X1S_1 -----
component RAM64X1S_1
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1S_1 : component is "PRIMITIVE";

----- component RAM64X2S -----
component RAM64X2S
  generic (
     INIT_00 : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_01 : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O0 : out std_ulogic;
     O1 : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D0 : in std_ulogic;
     D1 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X2S : component is "PRIMITIVE";

----- component RAMB16 -----
component RAMB16
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     INVERT_CLK_DOA_REG : boolean := false;
     INVERT_CLK_DOB_REG : boolean := false;
     RAM_EXTENSION_A : string := "NONE";
     RAM_EXTENSION_B : string := "NONE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASCADEOUTA : out std_ulogic;
     CASCADEOUTB : out std_ulogic;
     DOA : out std_logic_vector (31 downto 0);
     DOB : out std_logic_vector (31 downto 0);
     DOPA : out std_logic_vector (3 downto 0);
     DOPB : out std_logic_vector (3 downto 0);
     ADDRA : in std_logic_vector (14 downto 0);
     ADDRB : in std_logic_vector (14 downto 0);
     CASCADEINA : in std_ulogic;
     CASCADEINB : in std_ulogic;
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector (31 downto 0);
     DIB : in std_logic_vector (31 downto 0);
     DIPA : in std_logic_vector (3 downto 0);
     DIPB : in std_logic_vector (3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     REGCEA : in std_ulogic;
     REGCEB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector (3 downto 0);
     WEB : in std_logic_vector (3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16 : component is "PRIMITIVE";

----- component RAMB16BWE -----
component RAMB16BWE
  generic (
     DATA_WIDTH_A : integer := 0;
     DATA_WIDTH_B : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector (31 downto 0);
     DOB : out std_logic_vector (31 downto 0);
     DOPA : out std_logic_vector (3 downto 0);
     DOPB : out std_logic_vector (3 downto 0);
     ADDRA : in std_logic_vector (13 downto 0);
     ADDRB : in std_logic_vector (13 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector (31 downto 0);
     DIB : in std_logic_vector (31 downto 0);
     DIPA : in std_logic_vector (3 downto 0);
     DIPB : in std_logic_vector (3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector (3 downto 0);
     WEB : in std_logic_vector (3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE : component is "PRIMITIVE";

----- component RAMB16BWER -----
component RAMB16BWER
  generic (
     DATA_WIDTH_A : integer := 0;
     DATA_WIDTH_B : integer := 0;
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     EN_RSTRAM_A : boolean := TRUE;
     EN_RSTRAM_B : boolean := TRUE;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     RSTTYPE : string := "SYNC";
     RST_PRIORITY_A : string := "CE";
     RST_PRIORITY_B : string := "CE";
     SETUP_ALL : time := 1000 ps;
     SETUP_READ_FIRST : time := 3000 ps;
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_DEVICE : string := "SPARTAN3ADSP";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector (31 downto 0);
     DOB : out std_logic_vector (31 downto 0);
     DOPA : out std_logic_vector (3 downto 0);
     DOPB : out std_logic_vector (3 downto 0);
     ADDRA : in std_logic_vector (13 downto 0);
     ADDRB : in std_logic_vector (13 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector (31 downto 0);
     DIB : in std_logic_vector (31 downto 0);
     DIPA : in std_logic_vector (3 downto 0);
     DIPB : in std_logic_vector (3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     REGCEA : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     WEA : in std_logic_vector (3 downto 0);
     WEB : in std_logic_vector (3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWER : component is "PRIMITIVE";

----- component RAMB16BWE_S18 -----
component RAMB16BWE_S18
  generic (
     INIT : bit_vector := X"00000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"00000";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out std_logic_vector(15 downto 0);
     DOP : out std_logic_vector(1 downto 0);
     ADDR : in std_logic_vector(9 downto 0);
     CLK : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DIP : in std_logic_vector(1 downto 0);
     EN : in std_ulogic;
     SSR : in std_ulogic;
     WE : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S18 : component is "PRIMITIVE";

----- component RAMB16BWE_S18_S18 -----
component RAMB16BWE_S18_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(15 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPA : out std_logic_vector(1 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(9 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(15 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPA : in std_logic_vector(1 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEB : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S18_S18 : component is "PRIMITIVE";

----- component RAMB16BWE_S18_S9 -----
component RAMB16BWE_S18_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(15 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPA : out std_logic_vector(1 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(9 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(15 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPA : in std_logic_vector(1 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S18_S9 : component is "PRIMITIVE";

----- component RAMB16BWE_S36 -----
component RAMB16BWE_S36
  generic (
     INIT : bit_vector := X"000000000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"000000000";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out std_logic_vector(31 downto 0);
     DOP : out std_logic_vector(3 downto 0);
     ADDR : in std_logic_vector(8 downto 0);
     CLK : in std_ulogic;
     DI : in std_logic_vector(31 downto 0);
     DIP : in std_logic_vector(3 downto 0);
     EN : in std_ulogic;
     SSR : in std_ulogic;
     WE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S36 : component is "PRIMITIVE";

----- component RAMB16BWE_S36_S18 -----
component RAMB16BWE_S36_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(31 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPA : out std_logic_vector(3 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(8 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(31 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPA : in std_logic_vector(3 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEB : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S36_S18 : component is "PRIMITIVE";

----- component RAMB16BWE_S36_S36 -----
component RAMB16BWE_S36_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(31 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPA : out std_logic_vector(3 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(8 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(31 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPA : in std_logic_vector(3 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEB : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S36_S36 : component is "PRIMITIVE";

----- component RAMB16BWE_S36_S9 -----
component RAMB16BWE_S36_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(31 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPA : out std_logic_vector(3 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(8 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(31 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPA : in std_logic_vector(3 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16BWE_S36_S9 : component is "PRIMITIVE";

----- component RAMB16_S1 -----
component RAMB16_S1
  generic (
     INIT : bit_vector := X"0";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"0";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out STD_LOGIC_VECTOR (0 downto 0);
     ADDR : in STD_LOGIC_VECTOR (13 downto 0);
     CLK : in STD_ULOGIC;
     DI : in STD_LOGIC_VECTOR (0 downto 0);
     EN : in STD_ULOGIC;
     SSR : in STD_ULOGIC;
     WE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1 : component is "PRIMITIVE";

----- component RAMB16_S18 -----
component RAMB16_S18
  generic (
     INIT : bit_vector := X"00000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"00000";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out std_logic_vector (15 downto 0);
     DOP : out std_logic_vector (1 downto 0);
     ADDR : in std_logic_vector (9 downto 0);
     CLK : in std_ulogic;
     DI : in std_logic_vector (15 downto 0);
     DIP : in std_logic_vector (1 downto 0);
     EN : in std_ulogic;
     SSR : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S18 : component is "PRIMITIVE";

----- component RAMB16_S18_S18 -----
component RAMB16_S18_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(15 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPA : out std_logic_vector(1 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(9 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(15 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPA : in std_logic_vector(1 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S18_S18 : component is "PRIMITIVE";

----- component RAMB16_S18_S36 -----
component RAMB16_S18_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(15 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPA : out std_logic_vector(1 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(9 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(15 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPA : in std_logic_vector(1 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S18_S36 : component is "PRIMITIVE";

----- component RAMB16_S1_S1 -----
component RAMB16_S1_S1
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(13 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S1 : component is "PRIMITIVE";

----- component RAMB16_S1_S18 -----
component RAMB16_S1_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S18 : component is "PRIMITIVE";

----- component RAMB16_S1_S2 -----
component RAMB16_S1_S2
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(12 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S2 : component is "PRIMITIVE";

----- component RAMB16_S1_S36 -----
component RAMB16_S1_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S36 : component is "PRIMITIVE";

----- component RAMB16_S1_S4 -----
component RAMB16_S1_S4
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(11 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S4 : component is "PRIMITIVE";

----- component RAMB16_S1_S9 -----
component RAMB16_S1_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(0 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(0 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S1_S9 : component is "PRIMITIVE";

----- component RAMB16_S2 -----
component RAMB16_S2
  generic (
     INIT : bit_vector := X"0";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"0";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out STD_LOGIC_VECTOR (1 downto 0);
     ADDR : in STD_LOGIC_VECTOR (12 downto 0);
     CLK : in STD_ULOGIC;
     DI : in STD_LOGIC_VECTOR (1 downto 0);
     EN : in STD_ULOGIC;
     SSR : in STD_ULOGIC;
     WE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2 : component is "PRIMITIVE";

----- component RAMB16_S2_S18 -----
component RAMB16_S2_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(1 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(12 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2_S18 : component is "PRIMITIVE";

----- component RAMB16_S2_S2 -----
component RAMB16_S2_S2
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(1 downto 0);
     DOB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(12 downto 0);
     ADDRB : in std_logic_vector(12 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2_S2 : component is "PRIMITIVE";

----- component RAMB16_S2_S36 -----
component RAMB16_S2_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(1 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(12 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2_S36 : component is "PRIMITIVE";

----- component RAMB16_S2_S4 -----
component RAMB16_S2_S4
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(1 downto 0);
     DOB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(12 downto 0);
     ADDRB : in std_logic_vector(11 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2_S4 : component is "PRIMITIVE";

----- component RAMB16_S2_S9 -----
component RAMB16_S2_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(1 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(12 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S2_S9 : component is "PRIMITIVE";

----- component RAMB16_S36 -----
component RAMB16_S36
  generic (
     INIT : bit_vector := X"000000000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"000000000";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out STD_LOGIC_VECTOR (31 downto 0);
     DOP : out STD_LOGIC_VECTOR (3 downto 0);
     ADDR : in STD_LOGIC_VECTOR (8 downto 0);
     CLK : in STD_ULOGIC;
     DI : in STD_LOGIC_VECTOR (31 downto 0);
     DIP : in STD_LOGIC_VECTOR (3 downto 0);
     EN : in STD_ULOGIC;
     SSR : in STD_ULOGIC;
     WE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  RAMB16_S36 : component is "PRIMITIVE";

----- component RAMB16_S36_S36 -----
component RAMB16_S36_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(31 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPA : out std_logic_vector(3 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(8 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(31 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPA : in std_logic_vector(3 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S36_S36 : component is "PRIMITIVE";

----- component RAMB16_S4 -----
component RAMB16_S4
  generic (
     INIT : bit_vector := X"0";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"0";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out STD_LOGIC_VECTOR (3 downto 0);
     ADDR : in STD_LOGIC_VECTOR (11 downto 0);
     CLK : in STD_ULOGIC;
     DI : in STD_LOGIC_VECTOR (3 downto 0);
     EN : in STD_ULOGIC;
     SSR : in STD_ULOGIC;
     WE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  RAMB16_S4 : component is "PRIMITIVE";

----- component RAMB16_S4_S18 -----
component RAMB16_S4_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(3 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(11 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(3 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S4_S18 : component is "PRIMITIVE";

----- component RAMB16_S4_S36 -----
component RAMB16_S4_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(3 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(11 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(3 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S4_S36 : component is "PRIMITIVE";

----- component RAMB16_S4_S4 -----
component RAMB16_S4_S4
  generic (
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"0";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"0";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(3 downto 0);
     DOB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(11 downto 0);
     ADDRB : in std_logic_vector(11 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(3 downto 0);
     DIB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S4_S4 : component is "PRIMITIVE";

----- component RAMB16_S4_S9 -----
component RAMB16_S4_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"0";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"0";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(3 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(11 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(3 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S4_S9 : component is "PRIMITIVE";

----- component RAMB16_S9 -----
component RAMB16_S9
  generic (
     INIT : bit_vector := X"000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     SRVAL : bit_vector := X"000";
     WRITE_MODE : string := "WRITE_FIRST"
  );
  port (
     DO : out STD_LOGIC_VECTOR (7 downto 0);
     DOP : out STD_LOGIC_VECTOR (0 downto 0);
     ADDR : in STD_LOGIC_VECTOR (10 downto 0);
     CLK : in STD_ULOGIC;
     DI : in STD_LOGIC_VECTOR (7 downto 0);
     DIP : in STD_LOGIC_VECTOR (0 downto 0);
     EN : in STD_ULOGIC;
     SSR : in STD_ULOGIC;
     WE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  RAMB16_S9 : component is "PRIMITIVE";

----- component RAMB16_S9_S18 -----
component RAMB16_S9_S18
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000";
     INIT_B : bit_vector := X"00000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(7 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPA : out std_logic_vector(0 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(10 downto 0);
     ADDRB : in std_logic_vector(9 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(7 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPA : in std_logic_vector(0 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S9_S18 : component is "PRIMITIVE";

----- component RAMB16_S9_S36 -----
component RAMB16_S9_S36
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000";
     INIT_B : bit_vector := X"000000000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(7 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPA : out std_logic_vector(0 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(10 downto 0);
     ADDRB : in std_logic_vector(8 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(7 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPA : in std_logic_vector(0 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S9_S36 : component is "PRIMITIVE";

----- component RAMB16_S9_S9 -----
component RAMB16_S9_S9
  generic (
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000";
     INIT_B : bit_vector := X"000";
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"000";
     SRVAL_B : bit_vector := X"000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOA : out std_logic_vector(7 downto 0);
     DOB : out std_logic_vector(7 downto 0);
     DOPA : out std_logic_vector(0 downto 0);
     DOPB : out std_logic_vector(0 downto 0);
     ADDRA : in std_logic_vector(10 downto 0);
     ADDRB : in std_logic_vector(10 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(7 downto 0);
     DIB : in std_logic_vector(7 downto 0);
     DIPA : in std_logic_vector(0 downto 0);
     DIPB : in std_logic_vector(0 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_ulogic;
     WEB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB16_S9_S9 : component is "PRIMITIVE";

----- component RAMB18 -----
component RAMB18
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     INIT_FILE : string := "NONE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_MODE : string := "SAFE";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     DOA : out std_logic_vector(15 downto 0);
     DOB : out std_logic_vector(15 downto 0);
     DOPA : out std_logic_vector(1 downto 0);
     DOPB : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(13 downto 0);
     ADDRB : in std_logic_vector(13 downto 0);
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(15 downto 0);
     DIB : in std_logic_vector(15 downto 0);
     DIPA : in std_logic_vector(1 downto 0);
     DIPB : in std_logic_vector(1 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     REGCEA : in std_ulogic;
     REGCEB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEB : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18 : component is "PRIMITIVE";

----- component RAMB18SDP -----
component RAMB18SDP
  generic (
     DO_REG : integer := 0;
     INIT : bit_vector := X"000000000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_MODE : string := "SAFE";
     SRVAL : bit_vector := X"000000000"
  );
  port (
     DO : out std_logic_vector(31 downto 0);
     DOP : out std_logic_vector(3 downto 0);
     DI : in std_logic_vector(31 downto 0);
     DIP : in std_logic_vector(3 downto 0);
     RDADDR : in std_logic_vector(8 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     SSR : in std_ulogic;
     WE : in std_logic_vector(3 downto 0);
     WRADDR : in std_logic_vector(8 downto 0);
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB18SDP : component is "PRIMITIVE";

----- component RAMB36 -----
component RAMB36
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     RAM_EXTENSION_A : string := "NONE";
     RAM_EXTENSION_B : string := "NONE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_MODE : string := "SAFE";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASCADEOUTLATA : out std_ulogic;
     CASCADEOUTLATB : out std_ulogic;
     CASCADEOUTREGA : out std_ulogic;
     CASCADEOUTREGB : out std_ulogic;
     DOA : out std_logic_vector(31 downto 0);
     DOB : out std_logic_vector(31 downto 0);
     DOPA : out std_logic_vector(3 downto 0);
     DOPB : out std_logic_vector(3 downto 0);
     ADDRA : in std_logic_vector(15 downto 0);
     ADDRB : in std_logic_vector(15 downto 0);
     CASCADEINLATA : in std_ulogic;
     CASCADEINLATB : in std_ulogic;
     CASCADEINREGA : in std_ulogic;
     CASCADEINREGB : in std_ulogic;
     CLKA : in std_ulogic;
     CLKB : in std_ulogic;
     DIA : in std_logic_vector(31 downto 0);
     DIB : in std_logic_vector(31 downto 0);
     DIPA : in std_logic_vector(3 downto 0);
     DIPB : in std_logic_vector(3 downto 0);
     ENA : in std_ulogic;
     ENB : in std_ulogic;
     REGCEA : in std_ulogic;
     REGCEB : in std_ulogic;
     SSRA : in std_ulogic;
     SSRB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEB : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36 : component is "PRIMITIVE";

----- component RAMB36SDP -----
component RAMB36SDP
  generic (
     DO_REG : integer := 0;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_SCRUB : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     INIT : bit_vector := X"000000000000000000";
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_MODE : string := "SAFE";
     SRVAL : bit_vector := X"000000000000000000"
  );
  port (
     DBITERR : out std_ulogic;
     DO : out std_logic_vector(63 downto 0);
     DOP : out std_logic_vector(7 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     SBITERR : out std_ulogic;
     DI : in std_logic_vector(63 downto 0);
     DIP : in std_logic_vector(7 downto 0);
     RDADDR : in std_logic_vector(8 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     SSR : in std_ulogic;
     WE : in std_logic_vector(7 downto 0);
     WRADDR : in std_logic_vector(8 downto 0);
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB36SDP : component is "PRIMITIVE";

----- component RAMB8BWER -----
component RAMB8BWER
  generic (
     DATA_WIDTH_A : integer := 0;
     DATA_WIDTH_B : integer := 0;
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     EN_RSTRAM_A : boolean := TRUE;
     EN_RSTRAM_B : boolean := TRUE;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     INIT_FILE : string := "NONE";
     RAM_MODE : string := "TDP";
     RSTTYPE : string := "SYNC";
     RST_PRIORITY_A : string := "CE";
     RST_PRIORITY_B : string := "CE";
     SETUP_ALL : time := 1000 ps;
     SETUP_READ_FIRST : time := 3000 ps;
     SIM_COLLISION_CHECK : string := "ALL";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST"
  );
  port (
     DOADO : out std_logic_vector(15 downto 0);
     DOBDO : out std_logic_vector(15 downto 0);
     DOPADOP : out std_logic_vector(1 downto 0);
     DOPBDOP : out std_logic_vector(1 downto 0);
     ADDRAWRADDR : in std_logic_vector(12 downto 0);
     ADDRBRDADDR : in std_logic_vector(12 downto 0);
     CLKAWRCLK : in std_ulogic;
     CLKBRDCLK : in std_ulogic;
     DIADI : in std_logic_vector(15 downto 0);
     DIBDI : in std_logic_vector(15 downto 0);
     DIPADIP : in std_logic_vector(1 downto 0);
     DIPBDIP : in std_logic_vector(1 downto 0);
     ENAWREN : in std_ulogic;
     ENBRDEN : in std_ulogic;
     REGCEA : in std_ulogic;
     REGCEBREGCE : in std_ulogic;
     RSTA : in std_ulogic;
     RSTBRST : in std_ulogic;
     WEAWEL : in std_logic_vector(1 downto 0);
     WEBWEU : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB8BWER : component is "PRIMITIVE";

----- component ROM128X1 -----
component ROM128X1
  generic (
     INIT : bit_vector := X"00000000000000000000000000000000"
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     A6 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ROM128X1 : component is "PRIMITIVE";

----- component ROM16X1 -----
component ROM16X1
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ROM16X1 : component is "PRIMITIVE";

----- component ROM256X1 -----
component ROM256X1
  generic (
     INIT : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     A6 : in std_ulogic;
     A7 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ROM256X1 : component is "PRIMITIVE";

----- component ROM32X1 -----
component ROM32X1
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ROM32X1 : component is "PRIMITIVE";

----- component ROM64X1 -----
component ROM64X1
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ROM64X1 : component is "PRIMITIVE";

----- component SRL16 -----
component SRL16
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL16 : component is "PRIMITIVE";

----- component SRL16E_1 -----
component SRL16E_1
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL16E_1 : component is "PRIMITIVE";

----- component SRL16_1 -----
component SRL16_1
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL16_1 : component is "PRIMITIVE";

----- component SRL32E -----
component SRL32E
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     Q : out STD_ULOGIC;
     A : in STD_LOGIC_VECTOR (4 downto 0) := "00000";
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL32E : component is "PRIMITIVE";

----- component SRLC16 -----
component SRLC16
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     Q15 : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC16 : component is "PRIMITIVE";

----- component SRLC16E_1 -----
component SRLC16E_1
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     Q15 : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC16E_1 : component is "PRIMITIVE";

----- component SRLC16_1 -----
component SRLC16_1
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     Q : out STD_ULOGIC;
     Q15 : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC16_1 : component is "PRIMITIVE";

----- component STARTUP_SPARTAN3 -----
component STARTUP_SPARTAN3
  port (
     CLK : in std_ulogic := 'X';
     GSR : in std_ulogic := 'X';
     GTS : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  STARTUP_SPARTAN3 : component is "PRIMITIVE";

----- component STARTUP_SPARTAN3A -----
component STARTUP_SPARTAN3A
  port (
     CLK : in std_ulogic := 'X';
     GSR : in std_ulogic := 'X';
     GTS : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  STARTUP_SPARTAN3A : component is "PRIMITIVE";

----- component STARTUP_SPARTAN6 -----
component STARTUP_SPARTAN6
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     EOS : out std_ulogic;
     CLK : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUP_SPARTAN6 : component is "PRIMITIVE";

----- component STARTUP_VIRTEX4 -----
component STARTUP_VIRTEX4
  port (
     EOS : out std_ulogic;
     CLK : in std_ulogic := 'X';
     GSR : in std_ulogic := 'X';
     GTS : in std_ulogic := 'X';
     USRCCLKO : in std_ulogic := 'X';
     USRCCLKTS : in std_ulogic := 'X';
     USRDONEO : in std_ulogic := 'X';
     USRDONETS : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  STARTUP_VIRTEX4 : component is "PRIMITIVE";

----- component STARTUP_VIRTEX5 -----
component STARTUP_VIRTEX5
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     DINSPI : out std_ulogic;
     EOS : out std_ulogic;
     TCKSPI : out std_ulogic;
     CLK : in std_ulogic := 'X';
     GSR : in std_ulogic := 'X';
     GTS : in std_ulogic := 'X';
     USRCCLKO : in std_ulogic := 'X';
     USRCCLKTS : in std_ulogic := 'X';
     USRDONEO : in std_ulogic := 'X';
     USRDONETS : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  STARTUP_VIRTEX5 : component is "PRIMITIVE";

----- component STARTUP_VIRTEX6 -----
component STARTUP_VIRTEX6
  generic (
     PROG_USR : boolean := FALSE
  );
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     DINSPI : out std_ulogic;
     EOS : out std_ulogic;
     PREQ : out std_ulogic;
     TCKSPI : out std_ulogic;
     CLK : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic;
     PACK : in std_ulogic;
     USRCCLKO : in std_ulogic;
     USRCCLKTS : in std_ulogic;
     USRDONEO : in std_ulogic;
     USRDONETS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUP_VIRTEX6 : component is "PRIMITIVE";

----- component SYSMON -----
component SYSMON
  generic (
     INIT_40 : bit_vector := X"0000";
     INIT_41 : bit_vector := X"0000";
     INIT_42 : bit_vector := X"0800";
     INIT_43 : bit_vector := X"0000";
     INIT_44 : bit_vector := X"0000";
     INIT_45 : bit_vector := X"0000";
     INIT_46 : bit_vector := X"0000";
     INIT_47 : bit_vector := X"0000";
     INIT_48 : bit_vector := X"0000";
     INIT_49 : bit_vector := X"0000";
     INIT_4A : bit_vector := X"0000";
     INIT_4B : bit_vector := X"0000";
     INIT_4C : bit_vector := X"0000";
     INIT_4D : bit_vector := X"0000";
     INIT_4E : bit_vector := X"0000";
     INIT_4F : bit_vector := X"0000";
     INIT_50 : bit_vector := X"0000";
     INIT_51 : bit_vector := X"0000";
     INIT_52 : bit_vector := X"0000";
     INIT_53 : bit_vector := X"0000";
     INIT_54 : bit_vector := X"0000";
     INIT_55 : bit_vector := X"0000";
     INIT_56 : bit_vector := X"0000";
     INIT_57 : bit_vector := X"0000";
     SIM_DEVICE : string := "VIRTEX5";
     SIM_MONITOR_FILE : string := "design.txt"
  );
  port (
     ALM : out std_logic_vector(2 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(4 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     OT : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  SYSMON : component is "PRIMITIVE";

----- component TEMAC_SINGLE -----
component TEMAC_SINGLE
  generic (
     EMAC_1000BASEX_ENABLE : boolean := FALSE;
     EMAC_ADDRFILTER_ENABLE : boolean := FALSE;
     EMAC_BYTEPHY : boolean := FALSE;
     EMAC_CTRLLENCHECK_DISABLE : boolean := FALSE;
     EMAC_DCRBASEADDR : bit_vector := X"00";
     EMAC_GTLOOPBACK : boolean := FALSE;
     EMAC_HOST_ENABLE : boolean := FALSE;
     EMAC_LINKTIMERVAL : bit_vector := X"000";
     EMAC_LTCHECK_DISABLE : boolean := FALSE;
     EMAC_MDIO_ENABLE : boolean := FALSE;
     EMAC_MDIO_IGNORE_PHYADZERO : boolean := FALSE;
     EMAC_PAUSEADDR : bit_vector := X"000000000000";
     EMAC_PHYINITAUTONEG_ENABLE : boolean := FALSE;
     EMAC_PHYISOLATE : boolean := FALSE;
     EMAC_PHYLOOPBACKMSB : boolean := FALSE;
     EMAC_PHYPOWERDOWN : boolean := FALSE;
     EMAC_PHYRESET : boolean := FALSE;
     EMAC_RGMII_ENABLE : boolean := FALSE;
     EMAC_RX16BITCLIENT_ENABLE : boolean := FALSE;
     EMAC_RXFLOWCTRL_ENABLE : boolean := FALSE;
     EMAC_RXHALFDUPLEX : boolean := FALSE;
     EMAC_RXINBANDFCS_ENABLE : boolean := FALSE;
     EMAC_RXJUMBOFRAME_ENABLE : boolean := FALSE;
     EMAC_RXRESET : boolean := FALSE;
     EMAC_RXVLAN_ENABLE : boolean := FALSE;
     EMAC_RX_ENABLE : boolean := TRUE;
     EMAC_SGMII_ENABLE : boolean := FALSE;
     EMAC_SPEED_LSB : boolean := FALSE;
     EMAC_SPEED_MSB : boolean := FALSE;
     EMAC_TX16BITCLIENT_ENABLE : boolean := FALSE;
     EMAC_TXFLOWCTRL_ENABLE : boolean := FALSE;
     EMAC_TXHALFDUPLEX : boolean := FALSE;
     EMAC_TXIFGADJUST_ENABLE : boolean := FALSE;
     EMAC_TXINBANDFCS_ENABLE : boolean := FALSE;
     EMAC_TXJUMBOFRAME_ENABLE : boolean := FALSE;
     EMAC_TXRESET : boolean := FALSE;
     EMAC_TXVLAN_ENABLE : boolean := FALSE;
     EMAC_TX_ENABLE : boolean := TRUE;
     EMAC_UNICASTADDR : bit_vector := X"000000000000";
     EMAC_UNIDIRECTION_ENABLE : boolean := FALSE;
     EMAC_USECLKEN : boolean := FALSE;
     SIM_VERSION : string := "1.0"
  );
  port (
     DCRHOSTDONEIR : out std_ulogic;
     EMACCLIENTANINTERRUPT : out std_ulogic;
     EMACCLIENTRXBADFRAME : out std_ulogic;
     EMACCLIENTRXCLIENTCLKOUT : out std_ulogic;
     EMACCLIENTRXD : out std_logic_vector(15 downto 0);
     EMACCLIENTRXDVLD : out std_ulogic;
     EMACCLIENTRXDVLDMSW : out std_ulogic;
     EMACCLIENTRXFRAMEDROP : out std_ulogic;
     EMACCLIENTRXGOODFRAME : out std_ulogic;
     EMACCLIENTRXSTATS : out std_logic_vector(6 downto 0);
     EMACCLIENTRXSTATSBYTEVLD : out std_ulogic;
     EMACCLIENTRXSTATSVLD : out std_ulogic;
     EMACCLIENTTXACK : out std_ulogic;
     EMACCLIENTTXCLIENTCLKOUT : out std_ulogic;
     EMACCLIENTTXCOLLISION : out std_ulogic;
     EMACCLIENTTXRETRANSMIT : out std_ulogic;
     EMACCLIENTTXSTATS : out std_ulogic;
     EMACCLIENTTXSTATSBYTEVLD : out std_ulogic;
     EMACCLIENTTXSTATSVLD : out std_ulogic;
     EMACDCRACK : out std_ulogic;
     EMACDCRDBUS : out std_logic_vector(0 to 31);
     EMACPHYENCOMMAALIGN : out std_ulogic;
     EMACPHYLOOPBACKMSB : out std_ulogic;
     EMACPHYMCLKOUT : out std_ulogic;
     EMACPHYMDOUT : out std_ulogic;
     EMACPHYMDTRI : out std_ulogic;
     EMACPHYMGTRXRESET : out std_ulogic;
     EMACPHYMGTTXRESET : out std_ulogic;
     EMACPHYPOWERDOWN : out std_ulogic;
     EMACPHYSYNCACQSTATUS : out std_ulogic;
     EMACPHYTXCHARDISPMODE : out std_ulogic;
     EMACPHYTXCHARDISPVAL : out std_ulogic;
     EMACPHYTXCHARISK : out std_ulogic;
     EMACPHYTXCLK : out std_ulogic;
     EMACPHYTXD : out std_logic_vector(7 downto 0);
     EMACPHYTXEN : out std_ulogic;
     EMACPHYTXER : out std_ulogic;
     EMACPHYTXGMIIMIICLKOUT : out std_ulogic;
     EMACSPEEDIS10100 : out std_ulogic;
     HOSTMIIMRDY : out std_ulogic;
     HOSTRDDATA : out std_logic_vector(31 downto 0);
     CLIENTEMACDCMLOCKED : in std_ulogic;
     CLIENTEMACPAUSEREQ : in std_ulogic;
     CLIENTEMACPAUSEVAL : in std_logic_vector(15 downto 0);
     CLIENTEMACRXCLIENTCLKIN : in std_ulogic;
     CLIENTEMACTXCLIENTCLKIN : in std_ulogic;
     CLIENTEMACTXD : in std_logic_vector(15 downto 0);
     CLIENTEMACTXDVLD : in std_ulogic;
     CLIENTEMACTXDVLDMSW : in std_ulogic;
     CLIENTEMACTXFIRSTBYTE : in std_ulogic;
     CLIENTEMACTXIFGDELAY : in std_logic_vector(7 downto 0);
     CLIENTEMACTXUNDERRUN : in std_ulogic;
     DCREMACABUS : in std_logic_vector(0 to 9);
     DCREMACCLK : in std_ulogic;
     DCREMACDBUS : in std_logic_vector(0 to 31);
     DCREMACENABLE : in std_ulogic;
     DCREMACREAD : in std_ulogic;
     DCREMACWRITE : in std_ulogic;
     HOSTADDR : in std_logic_vector(9 downto 0);
     HOSTCLK : in std_ulogic;
     HOSTMIIMSEL : in std_ulogic;
     HOSTOPCODE : in std_logic_vector(1 downto 0);
     HOSTREQ : in std_ulogic;
     HOSTWRDATA : in std_logic_vector(31 downto 0);
     PHYEMACCOL : in std_ulogic;
     PHYEMACCRS : in std_ulogic;
     PHYEMACGTXCLK : in std_ulogic;
     PHYEMACMCLKIN : in std_ulogic;
     PHYEMACMDIN : in std_ulogic;
     PHYEMACMIITXCLK : in std_ulogic;
     PHYEMACPHYAD : in std_logic_vector(4 downto 0);
     PHYEMACRXBUFSTATUS : in std_logic_vector(1 downto 0);
     PHYEMACRXCHARISCOMMA : in std_ulogic;
     PHYEMACRXCHARISK : in std_ulogic;
     PHYEMACRXCLK : in std_ulogic;
     PHYEMACRXCLKCORCNT : in std_logic_vector(2 downto 0);
     PHYEMACRXD : in std_logic_vector(7 downto 0);
     PHYEMACRXDISPERR : in std_ulogic;
     PHYEMACRXDV : in std_ulogic;
     PHYEMACRXER : in std_ulogic;
     PHYEMACRXNOTINTABLE : in std_ulogic;
     PHYEMACRXRUNDISP : in std_ulogic;
     PHYEMACSIGNALDET : in std_ulogic;
     PHYEMACTXBUFERR : in std_ulogic;
     PHYEMACTXGMIIMIICLKIN : in std_ulogic;
     RESET : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  TEMAC_SINGLE : component is "PRIMITIVE";

----- component USR_ACCESS_VIRTEX4 -----
component USR_ACCESS_VIRTEX4
  port (
     DATA : out std_logic_vector(31 downto 0);
     DATAVALID : out std_ulogic
  );
end component;
attribute BOX_TYPE of
  USR_ACCESS_VIRTEX4 : component is "PRIMITIVE";

----- component USR_ACCESS_VIRTEX5 -----
component USR_ACCESS_VIRTEX5
  port (
     CFGCLK : out std_ulogic;
     DATA : out std_logic_vector(31 downto 0);
     DATAVALID : out std_ulogic
  );
end component;
attribute BOX_TYPE of
  USR_ACCESS_VIRTEX5 : component is "PRIMITIVE";

----- component USR_ACCESS_VIRTEX6 -----
component USR_ACCESS_VIRTEX6
  port (
     CFGCLK : out std_ulogic;
     DATA : out std_logic_vector(31 downto 0);
     DATAVALID : out std_ulogic
  );
end component;
attribute BOX_TYPE of
  USR_ACCESS_VIRTEX6 : component is "PRIMITIVE";

----- component XNOR2 -----
component XNOR2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XNOR2 : component is "PRIMITIVE";

----- component XNOR3 -----
component XNOR3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XNOR3 : component is "PRIMITIVE";

----- component XNOR4 -----
component XNOR4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XNOR4 : component is "PRIMITIVE";

----- component XNOR5 -----
component XNOR5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XNOR5 : component is "PRIMITIVE";

----- component XOR2 -----
component XOR2
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XOR2 : component is "PRIMITIVE";

----- component XOR3 -----
component XOR3
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XOR3 : component is "PRIMITIVE";

----- component XOR4 -----
component XOR4
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XOR4 : component is "PRIMITIVE";

----- component XOR5 -----
component XOR5
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XOR5 : component is "PRIMITIVE";

----- component XORCY_D -----
component XORCY_D
  port (
     LO : out std_ulogic;
     O : out std_ulogic;
     CI : in std_ulogic;
     LI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XORCY_D : component is "PRIMITIVE";

----- component XORCY_L -----
component XORCY_L
  port (
     LO : out std_ulogic;
     CI : in std_ulogic;
     LI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XORCY_L : component is "PRIMITIVE";

-- END COMPONENT

end VCOMPONENTS;
